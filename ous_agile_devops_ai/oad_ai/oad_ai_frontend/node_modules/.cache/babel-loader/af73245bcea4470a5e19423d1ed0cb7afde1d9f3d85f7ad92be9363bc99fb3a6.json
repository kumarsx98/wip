{"ast":null,"code":"import axios from 'axios';\nimport { Fernet } from 'fernet';\nconst AUTO_UPLOAD_URL = 'http://localhost:3001/api/v1/auto-upload/';\n\n// Function to load the encryption key\nconst loadEncryptionKey = async () => {\n  try {\n    const response = await fetch('/encryption_key.txt');\n    const key = await response.text();\n    return key;\n  } catch (error) {\n    console.error('Error loading encryption key:', error);\n    throw error;\n  }\n};\n\n// Function to encrypt the API key\nconst encryptApiKey = async apiKey => {\n  const encryptionKey = await loadEncryptionKey();\n  const secret = new Fernet.Secret(encryptionKey);\n  const token = new Fernet.Token({\n    secret: secret,\n    token: null,\n    ttl: 0\n  });\n  return token.encode(apiKey);\n};\nexport const handleAutoUpload = async () => {\n  try {\n    const apiKey = localStorage.getItem('apiKey');\n    if (!apiKey) {\n      console.error('No API key found in localStorage');\n      // Handle this case - maybe redirect to login\n      return;\n    }\n    const encryptedApiKey = await encryptApiKey(apiKey);\n    const response = await axios.post(AUTO_UPLOAD_URL, {}, {\n      headers: {\n        'Authorization': `EncryptedKey ${encryptedApiKey}`\n      }\n    });\n    console.log('Auto-upload response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during auto-upload:', error);\n    throw error;\n  }\n};\nexport const startAutoUploadInterval = intervalInMinutes => {\n  const intervalInMilliseconds = intervalInMinutes * 60 * 1000;\n  const intervalId = setInterval(async () => {\n    try {\n      await handleAutoUpload();\n    } catch (error) {\n      console.error('Error in auto-upload interval:', error);\n    }\n  }, intervalInMilliseconds);\n  return intervalId;\n};\nexport const stopAutoUploadInterval = intervalId => {\n  clearInterval(intervalId);\n};","map":{"version":3,"names":["axios","Fernet","AUTO_UPLOAD_URL","loadEncryptionKey","response","fetch","key","text","error","console","encryptApiKey","apiKey","encryptionKey","secret","Secret","token","Token","ttl","encode","handleAutoUpload","localStorage","getItem","encryptedApiKey","post","headers","log","data","startAutoUploadInterval","intervalInMinutes","intervalInMilliseconds","intervalId","setInterval","stopAutoUploadInterval","clearInterval"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/AutoUploadManager.js"],"sourcesContent":["import axios from 'axios';\r\nimport { Fernet } from 'fernet';\r\n\r\nconst AUTO_UPLOAD_URL = 'http://localhost:3001/api/v1/auto-upload/';\r\n\r\n// Function to load the encryption key\r\nconst loadEncryptionKey = async () => {\r\n  try {\r\n    const response = await fetch('/encryption_key.txt');\r\n    const key = await response.text();\r\n    return key;\r\n  } catch (error) {\r\n    console.error('Error loading encryption key:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to encrypt the API key\r\nconst encryptApiKey = async (apiKey) => {\r\n  const encryptionKey = await loadEncryptionKey();\r\n  const secret = new Fernet.Secret(encryptionKey);\r\n  const token = new Fernet.Token({\r\n    secret: secret,\r\n    token: null,\r\n    ttl: 0\r\n  });\r\n  return token.encode(apiKey);\r\n};\r\n\r\nexport const handleAutoUpload = async () => {\r\n  try {\r\n    const apiKey = localStorage.getItem('apiKey');\r\n    if (!apiKey) {\r\n      console.error('No API key found in localStorage');\r\n      // Handle this case - maybe redirect to login\r\n      return;\r\n    }\r\n\r\n    const encryptedApiKey = await encryptApiKey(apiKey);\r\n\r\n    const response = await axios.post(AUTO_UPLOAD_URL, {}, {\r\n      headers: {\r\n        'Authorization': `EncryptedKey ${encryptedApiKey}`,\r\n      },\r\n    });\r\n\r\n    console.log('Auto-upload response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error during auto-upload:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const startAutoUploadInterval = (intervalInMinutes) => {\r\n  const intervalInMilliseconds = intervalInMinutes * 60 * 1000;\r\n\r\n  const intervalId = setInterval(async () => {\r\n    try {\r\n      await handleAutoUpload();\r\n    } catch (error) {\r\n      console.error('Error in auto-upload interval:', error);\r\n    }\r\n  }, intervalInMilliseconds);\r\n\r\n  return intervalId;\r\n}\r\n\r\nexport const stopAutoUploadInterval = (intervalId) => {\r\n  clearInterval(intervalId);\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,eAAe,GAAG,2CAA2C;;AAEnE;AACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqB,CAAC;IACnD,MAAMC,GAAG,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACjC,OAAOD,GAAG;EACZ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAME,aAAa,GAAG,MAAOC,MAAM,IAAK;EACtC,MAAMC,aAAa,GAAG,MAAMT,iBAAiB,CAAC,CAAC;EAC/C,MAAMU,MAAM,GAAG,IAAIZ,MAAM,CAACa,MAAM,CAACF,aAAa,CAAC;EAC/C,MAAMG,KAAK,GAAG,IAAId,MAAM,CAACe,KAAK,CAAC;IAC7BH,MAAM,EAAEA,MAAM;IACdE,KAAK,EAAE,IAAI;IACXE,GAAG,EAAE;EACP,CAAC,CAAC;EACF,OAAOF,KAAK,CAACG,MAAM,CAACP,MAAM,CAAC;AAC7B,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMR,MAAM,GAAGS,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,IAAI,CAACV,MAAM,EAAE;MACXF,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAC;MACjD;MACA;IACF;IAEA,MAAMc,eAAe,GAAG,MAAMZ,aAAa,CAACC,MAAM,CAAC;IAEnD,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACuB,IAAI,CAACrB,eAAe,EAAE,CAAC,CAAC,EAAE;MACrDsB,OAAO,EAAE;QACP,eAAe,EAAE,gBAAgBF,eAAe;MAClD;IACF,CAAC,CAAC;IAEFb,OAAO,CAACgB,GAAG,CAAC,uBAAuB,EAAErB,QAAQ,CAACsB,IAAI,CAAC;IACnD,OAAOtB,QAAQ,CAACsB,IAAI;EACtB,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMmB,uBAAuB,GAAIC,iBAAiB,IAAK;EAC5D,MAAMC,sBAAsB,GAAGD,iBAAiB,GAAG,EAAE,GAAG,IAAI;EAE5D,MAAME,UAAU,GAAGC,WAAW,CAAC,YAAY;IACzC,IAAI;MACF,MAAMZ,gBAAgB,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC,EAAEqB,sBAAsB,CAAC;EAE1B,OAAOC,UAAU;AACnB,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAIF,UAAU,IAAK;EACpDG,aAAa,CAACH,UAAU,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}