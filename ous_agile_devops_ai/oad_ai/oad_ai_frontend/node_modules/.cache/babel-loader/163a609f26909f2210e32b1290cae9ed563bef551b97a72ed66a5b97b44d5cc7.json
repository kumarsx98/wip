{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Desktop\\\\django_test\\\\ous_agile_devops_ai\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// Chatbot.js\n\nimport React, { useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport Header from './Header';\nimport ConversationBox from './ConversationBox';\nimport InputBox from './InputBox';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const {\n    mysource\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [question, setQuestion] = useState('');\n  const conversationBoxRef = useRef(null);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const message = e.target.message.value.trim();\n    console.log(`User input: ${message}`);\n    console.log(`Current source: ${mysource}`);\n    if (message !== '') {\n      e.target.message.value = '';\n      setIsLoading(true);\n      setShowSpinner(true);\n      setMessages([...messages, {\n        text: message,\n        sender: 'user'\n      }]);\n      const updatedMessages = [...messages];\n      updatedMessages.push({\n        text: message,\n        sender: 'user'\n      });\n      try {\n        console.log('Sending POST request to /chatbot1/search/');\n        const resp = await axios.post('/chatbot1/search/', {\n          question: message,\n          mysource\n        });\n        console.log('Received response from API:', resp.data);\n        let response = resp.data.response;\n\n        // Process the response text\n        response = response.replace(/\\[(.*?)\\]/g, '\\n\\n').replace(/(\\w+)\\.\\n\\n/g, '$1\\n').replace(/\\.\\n\\n/g, '.\\n').replace(/^\\s+|\\s+$/g, '').replace(/^\"|\"$/g, '').replace(/\\.\\s+(\\d+)\\./g, '$1.').replace(/^\\.\\s*/gm, '').replace(/([^.\\n])$/gm, '.');\n        const linkRegex = /(https?:\\/\\/[^\\s]+)/g;\n        response = response.replace(linkRegex, (match, url) => {\n          return `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`;\n        });\n        const urlRegex = /go\\/([^\\s]+)/g;\n        response = response.replace(urlRegex, (match, sometext) => {\n          const href = `http://go/${sometext}`;\n          return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">go/${sometext}</a>`;\n        });\n        const emailRegex = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/g;\n        response = response.replace(emailRegex, (match, email) => {\n          const href = `mailto:${email}`;\n          return `<a href=\"${href}\">${email}</a>`;\n        });\n        setMessages(prevMessages => [...prevMessages, {\n          text: response,\n          sender: 'bot',\n          copyButton: true,\n          filenames: resp.data.references ? resp.data.references.map(ref => ref.filename) : []\n        }]);\n        setShowSpinner(false);\n        if (conversationBoxRef.current) {\n          conversationBoxRef.current.scrollTop = conversationBoxRef.current.scrollHeight;\n        }\n      } catch (error) {\n        console.error('Error occurred during API request:', error);\n      }\n      setIsLoading(false);\n      setShowSpinner(false);\n    }\n  };\n  console.log('messages:', messages);\n  console.log('isLoading:', isLoading);\n  console.log('showSpinner:', showSpinner);\n  console.log('question:', question);\n  console.log('mysource:', mysource);\n  const chatbotClassName = mysource === 'public' ? 'Chatbot-public' : 'Chatbot-internal';\n  const conversationBoxClassName = mysource === 'public' ? 'conversation-box-public' : 'conversation-box-internal';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Chatbot ${chatbotClassName}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConversationBox, {\n      className: conversationBoxClassName,\n      messages: messages,\n      isLoading: isLoading,\n      conversationBoxRef: conversationBoxRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n      question: question,\n      setQuestion: setQuestion,\n      handleSendMessage: handleSendMessage,\n      isLoading: isLoading,\n      showSpinner: showSpinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"ZLwyo0rrzAhR0EfZ8vlNyK/FWaM=\", false, function () {\n  return [useParams];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useParams","axios","Header","ConversationBox","InputBox","jsxDEV","_jsxDEV","Chatbot","_s","mysource","messages","setMessages","isLoading","setIsLoading","showSpinner","setShowSpinner","question","setQuestion","conversationBoxRef","handleSendMessage","e","preventDefault","message","target","value","trim","console","log","text","sender","updatedMessages","push","resp","post","data","response","replace","linkRegex","match","url","urlRegex","sometext","href","emailRegex","email","prevMessages","copyButton","filenames","references","map","ref","filename","current","scrollTop","scrollHeight","error","chatbotClassName","conversationBoxClassName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Desktop/django_test/ous_agile_devops_ai/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/Chatbot.js"],"sourcesContent":["// Chatbot.js\r\n\r\nimport React, { useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport ConversationBox from './ConversationBox';\r\nimport InputBox from './InputBox';\r\nimport './App.css';\r\n\r\nfunction Chatbot() {\r\n  const { mysource } = useParams();\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showSpinner, setShowSpinner] = useState(false);\r\n  const [question, setQuestion] = useState('');\r\n  const conversationBoxRef = useRef(null);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    const message = e.target.message.value.trim();\r\n    \r\n    console.log(`User input: ${message}`);\r\n    console.log(`Current source: ${mysource}`);\r\n\r\n    if (message !== '') {\r\n      e.target.message.value = '';\r\n      setIsLoading(true);\r\n      setShowSpinner(true);\r\n      setMessages([...messages, { text: message, sender: 'user' }]);\r\n\r\n      const updatedMessages = [...messages];\r\n      updatedMessages.push({ text: message, sender: 'user' });\r\n\r\n      try {\r\n        console.log('Sending POST request to /chatbot1/search/');\r\n        const resp = await axios.post('/chatbot1/search/', { question: message, mysource });\r\n        console.log('Received response from API:', resp.data);\r\n        \r\n        let response = resp.data.response;\r\n\r\n        // Process the response text\r\n        response = response.replace(/\\[(.*?)\\]/g, '\\n\\n')\r\n          .replace(/(\\w+)\\.\\n\\n/g, '$1\\n')\r\n          .replace(/\\.\\n\\n/g, '.\\n')\r\n          .replace(/^\\s+|\\s+$/g, '')\r\n          .replace(/^\"|\"$/g, '')\r\n          .replace(/\\.\\s+(\\d+)\\./g, '$1.')\r\n          .replace(/^\\.\\s*/gm, '')\r\n          .replace(/([^.\\n])$/gm, '.');\r\n\r\n        const linkRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n        response = response.replace(linkRegex, (match, url) => {\r\n          return `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`;\r\n        });\r\n\r\n        const urlRegex = /go\\/([^\\s]+)/g;\r\n        response = response.replace(urlRegex, (match, sometext) => {\r\n          const href = `http://go/${sometext}`;\r\n          return `<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">go/${sometext}</a>`;\r\n        });\r\n\r\n        const emailRegex = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/g;\r\n        response = response.replace(emailRegex, (match, email) => {\r\n          const href = `mailto:${email}`;\r\n          return `<a href=\"${href}\">${email}</a>`;\r\n        });\r\n\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            text: response,\r\n            sender: 'bot',\r\n            copyButton: true,\r\n            filenames: resp.data.references ? resp.data.references.map((ref) => ref.filename) : [],\r\n          },\r\n        ]);\r\n\r\n        setShowSpinner(false);\r\n\r\n        if (conversationBoxRef.current) {\r\n          conversationBoxRef.current.scrollTop = conversationBoxRef.current.scrollHeight;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error occurred during API request:', error);\r\n      }\r\n\r\n      setIsLoading(false);\r\n      setShowSpinner(false);\r\n    }\r\n  };\r\n\r\n  console.log('messages:', messages);\r\n  console.log('isLoading:', isLoading);\r\n  console.log('showSpinner:', showSpinner);\r\n  console.log('question:', question);\r\n  console.log('mysource:', mysource);\r\n\r\n  const chatbotClassName = mysource === 'public' ? 'Chatbot-public' : 'Chatbot-internal';\r\n  const conversationBoxClassName = mysource === 'public' ? 'conversation-box-public' : 'conversation-box-internal';\r\n\r\n  return (\r\n    <div className={`Chatbot ${chatbotClassName}`}>\r\n      <Header />\r\n      <ConversationBox className={conversationBoxClassName} messages={messages} isLoading={isLoading} conversationBoxRef={conversationBoxRef} />\r\n      <InputBox question={question} setQuestion={setQuestion} handleSendMessage={handleSendMessage} isLoading={isLoading} showSpinner={showSpinner} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}