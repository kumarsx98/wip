{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\OAD_Auto\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\ListSources.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { Modal, Button, Progress, message } from 'antd';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ListSources() {\n  _s();\n  const [globalSources, setGlobalSources] = useState([]);\n  const [privateSources, setPrivateSources] = useState([]);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [documents, setDocuments] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [modalContent, setModalContent] = useState('');\n  const refreshData = useCallback(async () => {\n    await fetchSources();\n    if (selectedSource) {\n      await fetchDocuments(selectedSource);\n    }\n  }, [selectedSource]);\n  useEffect(() => {\n    refreshData();\n  }, [refreshData]);\n  const fetchSources = async () => {\n    setIsLoading(true);\n    try {\n      const response = await axios.get('/chatbot1/list-sources/', {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        setGlobalSources(response.data.global_sources || []);\n        setPrivateSources(response.data.private_sources || []);\n      } else {\n        message.error('An error occurred while fetching the sources.');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error during source fetching:', error);\n      message.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'An error occurred while fetching the sources.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchDocuments = async source => {\n    setIsLoading(true);\n    setSelectedSource(source);\n    try {\n      const response = await axios.get(`/chatbot1/list-documents/${source}/`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 200 && response.data.documents) {\n        setDocuments(response.data.documents.documents.map(doc => ({\n          ...doc,\n          path: doc.path || `/chatbot1/media/documents/${source}/${doc.filename}`\n        })));\n        if (response.data.documents.documents.length === 0) {\n          message.info('No documents found in this source.');\n        }\n      } else {\n        message.error('An error occurred while fetching the documents.');\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error during document fetching:', error);\n      message.error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'An error occurred while fetching the documents.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getCookie = name => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === `${name}=`) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n  const handleSyncSource = async () => {\n    try {\n      const response = await axios.post(`/chatbot1/sync-source/${selectedSource}/`, {}, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      message.success(response.data.message);\n      fetchDocuments(selectedSource);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error syncing source:', error);\n      message.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'An error occurred during synchronization.');\n    }\n  };\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!selectedFile || !selectedSource) {\n      message.warning('Please select a file and a source to upload.');\n      return;\n    }\n    setIsLoading(true);\n    setUploadProgress(0);\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      const response = await axios.post(`/chatbot1/upload-document/${selectedSource}/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true,\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setUploadProgress(percentCompleted);\n        }\n      });\n      console.log('Full API Response:', response.data);\n      if (response.data.status === 'PENDING') {\n        message.info(`Upload initiated. Task ID: ${response.data.task_id}. Checking status...`);\n        pollUploadStatus(selectedSource, response.data.task_id);\n      } else {\n        handleUploadResponse(response.data);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error uploading document:', error);\n      message.error(`Error: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'An error occurred while uploading the document.'}`);\n    } finally {\n      setIsLoading(false);\n      setUploadProgress(0);\n    }\n  };\n  const pollUploadStatus = async (source, taskId, maxAttempts = 10) => {\n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        const response = await axios.get(`/chatbot1/check-upload-status/${source}/${taskId}/`, {\n          headers: {\n            'X-CSRFToken': getCookie('csrftoken')\n          },\n          withCredentials: true\n        });\n        console.log('Poll response:', response.data);\n        if (response.data.status === 'SUCCESS' || response.data.status === 'ERROR') {\n          handleUploadResponse(response.data);\n          return;\n        }\n        message.info(`Upload still in progress. Checking again in 5 seconds...`);\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      } catch (error) {\n        console.error('Error polling upload status:', error);\n        message.error(`Error checking upload status: ${error.message}`);\n        return;\n      }\n    }\n    message.warning('Upload status check timed out. The upload may still be in progress.');\n  };\n  const handleUploadResponse = data => {\n    if (data.status === 'SUCCESS') {\n      setModalContent(`Upload completed successfully.\\n${JSON.stringify(data.full_response, null, 2)}`);\n      setIsModalVisible(true);\n      setSelectedFile(null);\n      fetchDocuments(selectedSource);\n    } else {\n      message.error(`Upload failed.\\nError: ${data.message}`);\n    }\n  };\n  const renderSourceList = (sources, title) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), sources.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sources.map(source => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"link\",\n          onClick: () => fetchDocuments(source),\n          children: source\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this)\n      }, source, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No \", title.toLowerCase(), \" found.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n  const renderDocuments = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Documents in \", selectedSource]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), documents.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total documents: \", documents.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: documents.map((document, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: document.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this), document.path && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Path: \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: document.path,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: document.path\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }, this)]\n        }, document.id || index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No documents available in this source.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleUpload,\n        disabled: isLoading || !selectedFile,\n        loading: isLoading,\n        children: isLoading ? 'Uploading...' : 'Upload Document'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), uploadProgress > 0 && uploadProgress < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Progress, {\n        percent: uploadProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setSelectedSource(null),\n      children: \"Back to Sources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSyncSource,\n      type: \"primary\",\n      children: \"Sync Source\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"List of Sources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this) : selectedSource ? renderDocuments() : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [renderSourceList(globalSources, 'Global Sources'), renderSourceList(privateSources, 'Private Sources'), globalSources.length === 0 && privateSources.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No sources found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Upload Successful\",\n      visible: isModalVisible,\n      onOk: () => setIsModalVisible(false),\n      onCancel: () => setIsModalVisible(false),\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: modalContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n}\n_s(ListSources, \"YjCOA9fGRIUiW/GcKhn7GME20IA=\");\n_c = ListSources;\nexport default ListSources;\nvar _c;\n$RefreshReg$(_c, \"ListSources\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","Modal","Button","Progress","message","jsxDEV","_jsxDEV","Fragment","_Fragment","ListSources","_s","globalSources","setGlobalSources","privateSources","setPrivateSources","selectedSource","setSelectedSource","documents","setDocuments","isLoading","setIsLoading","selectedFile","setSelectedFile","uploadProgress","setUploadProgress","isModalVisible","setIsModalVisible","modalContent","setModalContent","refreshData","fetchSources","fetchDocuments","response","get","headers","getCookie","withCredentials","status","data","global_sources","private_sources","error","_error$response","_error$response$data","console","source","map","doc","path","filename","length","info","_error$response2","_error$response2$data","name","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","handleSyncSource","post","success","_error$response3","_error$response3$data","handleFileChange","event","target","files","handleUpload","warning","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","log","task_id","pollUploadStatus","handleUploadResponse","_error$response4","_error$response4$data","taskId","maxAttempts","Promise","resolve","setTimeout","JSON","stringify","full_response","renderSourceList","sources","title","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","toLowerCase","renderDocuments","index","href","rel","id","onChange","disabled","loading","percent","visible","onOk","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/ListSources.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { Modal, Button, Progress, message } from 'antd';\r\n\r\nfunction ListSources() {\r\n  const [globalSources, setGlobalSources] = useState([]);\r\n  const [privateSources, setPrivateSources] = useState([]);\r\n  const [selectedSource, setSelectedSource] = useState(null);\r\n  const [documents, setDocuments] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [modalContent, setModalContent] = useState('');\r\n\r\n  const refreshData = useCallback(async () => {\r\n    await fetchSources();\r\n    if (selectedSource) {\r\n      await fetchDocuments(selectedSource);\r\n    }\r\n  }, [selectedSource]);\r\n\r\n  useEffect(() => {\r\n    refreshData();\r\n  }, [refreshData]);\r\n\r\n  const fetchSources = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await axios.get('/chatbot1/list-sources/', {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setGlobalSources(response.data.global_sources || []);\r\n        setPrivateSources(response.data.private_sources || []);\r\n      } else {\r\n        message.error('An error occurred while fetching the sources.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during source fetching:', error);\r\n      message.error(error.response?.data?.error || 'An error occurred while fetching the sources.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDocuments = async (source) => {\r\n    setIsLoading(true);\r\n    setSelectedSource(source);\r\n\r\n    try {\r\n      const response = await axios.get(`/chatbot1/list-documents/${source}/`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200 && response.data.documents) {\r\n        setDocuments(response.data.documents.documents.map(doc => ({\r\n          ...doc,\r\n          path: doc.path || `/chatbot1/media/documents/${source}/${doc.filename}`\r\n        })));\r\n        if (response.data.documents.documents.length === 0) {\r\n          message.info('No documents found in this source.');\r\n        }\r\n      } else {\r\n        message.error('An error occurred while fetching the documents.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during document fetching:', error);\r\n      message.error(error.response?.data?.error || 'An error occurred while fetching the documents.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCookie = (name) => {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === `${name}=`) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  };\r\n\r\n  const handleSyncSource = async () => {\r\n    try {\r\n      const response = await axios.post(`/chatbot1/sync-source/${selectedSource}/`, {}, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n      message.success(response.data.message);\r\n      fetchDocuments(selectedSource);\r\n    } catch (error) {\r\n      console.error('Error syncing source:', error);\r\n      message.error(error.response?.data?.error || 'An error occurred during synchronization.');\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedFile || !selectedSource) {\r\n      message.warning('Please select a file and a source to upload.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setUploadProgress(0);\r\n    const formData = new FormData();\r\n    formData.append('file', selectedFile);\r\n\r\n    try {\r\n      const response = await axios.post(`/chatbot1/upload-document/${selectedSource}/`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true,\r\n        onUploadProgress: (progressEvent) => {\r\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          setUploadProgress(percentCompleted);\r\n        }\r\n      });\r\n\r\n      console.log('Full API Response:', response.data);\r\n\r\n      if (response.data.status === 'PENDING') {\r\n        message.info(`Upload initiated. Task ID: ${response.data.task_id}. Checking status...`);\r\n        pollUploadStatus(selectedSource, response.data.task_id);\r\n      } else {\r\n        handleUploadResponse(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading document:', error);\r\n      message.error(`Error: ${error.response?.data?.message || 'An error occurred while uploading the document.'}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  };\r\n\r\n  const pollUploadStatus = async (source, taskId, maxAttempts = 10) => {\r\n    for (let i = 0; i < maxAttempts; i++) {\r\n      try {\r\n        const response = await axios.get(`/chatbot1/check-upload-status/${source}/${taskId}/`, {\r\n          headers: {\r\n            'X-CSRFToken': getCookie('csrftoken'),\r\n          },\r\n          withCredentials: true\r\n        });\r\n\r\n        console.log('Poll response:', response.data);\r\n\r\n        if (response.data.status === 'SUCCESS' || response.data.status === 'ERROR') {\r\n          handleUploadResponse(response.data);\r\n          return;\r\n        }\r\n\r\n        message.info(`Upload still in progress. Checking again in 5 seconds...`);\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n      } catch (error) {\r\n        console.error('Error polling upload status:', error);\r\n        message.error(`Error checking upload status: ${error.message}`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    message.warning('Upload status check timed out. The upload may still be in progress.');\r\n  };\r\n\r\n  const handleUploadResponse = (data) => {\r\n    if (data.status === 'SUCCESS') {\r\n      setModalContent(`Upload completed successfully.\\n${JSON.stringify(data.full_response, null, 2)}`);\r\n      setIsModalVisible(true);\r\n      setSelectedFile(null);\r\n      fetchDocuments(selectedSource);\r\n    } else {\r\n      message.error(`Upload failed.\\nError: ${data.message}`);\r\n    }\r\n  };\r\n\r\n  const renderSourceList = (sources, title) => (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {sources.length > 0 ? (\r\n        <ul>\r\n          {sources.map((source) => (\r\n            <li key={source}>\r\n              <Button type=\"link\" onClick={() => fetchDocuments(source)}>\r\n                {source}\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No {title.toLowerCase()} found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const renderDocuments = () => (\r\n    <div>\r\n      <h2>Documents in {selectedSource}</h2>\r\n      {documents.length > 0 ? (\r\n        <>\r\n          <p>Total documents: {documents.length}</p>\r\n          <ul>\r\n            {documents.map((document, index) => (\r\n              <li key={document.id || index}>\r\n                <h4>{document.filename}</h4>\r\n                {document.path && (\r\n                  <p>\r\n                    Path: <a href={document.path} target=\"_blank\" rel=\"noopener noreferrer\">{document.path}</a>\r\n                  </p>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      ) : (\r\n        <p>No documents available in this source.</p>\r\n      )}\r\n\r\n      <div>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={handleUpload}\r\n          disabled={isLoading || !selectedFile}\r\n          loading={isLoading}\r\n        >\r\n          {isLoading ? 'Uploading...' : 'Upload Document'}\r\n        </Button>\r\n      </div>\r\n\r\n      {uploadProgress > 0 && uploadProgress < 100 && (\r\n        <div>\r\n          <Progress percent={uploadProgress} />\r\n        </div>\r\n      )}\r\n\r\n      <Button onClick={() => setSelectedSource(null)}>\r\n        Back to Sources\r\n      </Button>\r\n      <Button onClick={handleSyncSource} type=\"primary\">\r\n        Sync Source\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>List of Sources</h1>\r\n      {isLoading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        selectedSource ? renderDocuments() : (\r\n          <>\r\n            {renderSourceList(globalSources, 'Global Sources')}\r\n            {renderSourceList(privateSources, 'Private Sources')}\r\n            {globalSources.length === 0 && privateSources.length === 0 && (\r\n              <p>No sources found.</p>\r\n            )}\r\n          </>\r\n        )\r\n      )}\r\n      <Modal\r\n        title=\"Upload Successful\"\r\n        visible={isModalVisible}\r\n        onOk={() => setIsModalVisible(false)}\r\n        onCancel={() => setIsModalVisible(false)}\r\n      >\r\n        <p>{modalContent}</p>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListSources;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}