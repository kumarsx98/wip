{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\OAD_Auto\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\AutoUploadManager.js\",\n  _s = $RefreshSig$();\n// AutoUploadManager.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AutoUploadManager() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [processedFiles, setProcessedFiles] = useState([]);\n  const handleAutoUpload = async () => {\n    setIsLoading(true);\n    setMessage('');\n    try {\n      const response = await axios.post('/api/v1/auto-upload/', {}, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n          'x-user-token': localStorage.getItem('userToken')\n        }\n      });\n      if (response.status === 202) {\n        setProcessedFiles(response.data.processed_files);\n        setMessage('Auto-upload process started successfully.');\n      } else {\n        setMessage('An unexpected error occurred during auto-upload.');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error during auto-upload:', error);\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'An error occurred during auto-upload.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const checkTaskStatus = async taskId => {\n    try {\n      const response = await axios.get(`/api/v1/auto-upload/${taskId}/`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\n          'x-user-token': localStorage.getItem('userToken')\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error checking task status:', error);\n      return {\n        state: 'ERROR',\n        status: 'Failed to check status'\n      };\n    }\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handleAutoUpload();\n    }, 5 * 60 * 1000); // Run every 5 minutes\n\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const updateTaskStatuses = async () => {\n      if (processedFiles.length > 0) {\n        const updatedFiles = await Promise.all(processedFiles.map(async file => {\n          const status = await checkTaskStatus(file.task_id);\n          return {\n            ...file,\n            ...status\n          };\n        }));\n        setProcessedFiles(updatedFiles);\n      }\n    };\n    const statusInterval = setInterval(updateTaskStatuses, 5000); // Check every 5 seconds\n\n    return () => clearInterval(statusInterval);\n  }, [processedFiles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      backgroundColor: 'white',\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Auto-Upload Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoUpload,\n      disabled: isLoading,\n      style: {\n        marginBottom: '20px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      },\n      children: isLoading ? 'Processing...' : 'Run Auto-Upload'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }, this), processedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Processed Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: processedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.filename, \" (Source: \", file.source, \"): \", file.state, \" - \", file.status]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(AutoUploadManager, \"2ZtkPmaU76E6vysFOnvOYsIi5xA=\");\n_c = AutoUploadManager;\nexport default AutoUploadManager;\nvar _c;\n$RefreshReg$(_c, \"AutoUploadManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AutoUploadManager","_s","isLoading","setIsLoading","message","setMessage","processedFiles","setProcessedFiles","handleAutoUpload","response","post","headers","localStorage","getItem","status","data","processed_files","error","_error$response","_error$response$data","console","checkTaskStatus","taskId","get","state","interval","setInterval","clearInterval","updateTaskStatuses","length","updatedFiles","Promise","all","map","file","task_id","statusInterval","style","padding","backgroundColor","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","marginBottom","color","border","borderRadius","cursor","index","filename","source","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/AutoUploadManager.js"],"sourcesContent":["// AutoUploadManager.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction AutoUploadManager() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [processedFiles, setProcessedFiles] = useState([]);\r\n\r\n  const handleAutoUpload = async () => {\r\n    setIsLoading(true);\r\n    setMessage('');\r\n\r\n    try {\r\n      const response = await axios.post('/api/v1/auto-upload/', {}, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n          'x-user-token': localStorage.getItem('userToken'),\r\n        },\r\n      });\r\n\r\n      if (response.status === 202) {\r\n        setProcessedFiles(response.data.processed_files);\r\n        setMessage('Auto-upload process started successfully.');\r\n      } else {\r\n        setMessage('An unexpected error occurred during auto-upload.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during auto-upload:', error);\r\n      setMessage(error.response?.data?.error || 'An error occurred during auto-upload.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkTaskStatus = async (taskId) => {\r\n    try {\r\n      const response = await axios.get(`/api/v1/auto-upload/${taskId}/`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,\r\n          'x-user-token': localStorage.getItem('userToken'),\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error checking task status:', error);\r\n      return { state: 'ERROR', status: 'Failed to check status' };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      handleAutoUpload();\r\n    }, 5 * 60 * 1000); // Run every 5 minutes\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateTaskStatuses = async () => {\r\n      if (processedFiles.length > 0) {\r\n        const updatedFiles = await Promise.all(\r\n          processedFiles.map(async (file) => {\r\n            const status = await checkTaskStatus(file.task_id);\r\n            return { ...file, ...status };\r\n          })\r\n        );\r\n        setProcessedFiles(updatedFiles);\r\n      }\r\n    };\r\n\r\n    const statusInterval = setInterval(updateTaskStatuses, 5000); // Check every 5 seconds\r\n\r\n    return () => clearInterval(statusInterval);\r\n  }, [processedFiles]);\r\n\r\n  return (\r\n    <div style={{ padding: '20px', backgroundColor: 'white', maxWidth: '800px', margin: '0 auto' }}>\r\n      <h2>Auto-Upload Manager</h2>\r\n      <button\r\n        onClick={handleAutoUpload}\r\n        disabled={isLoading}\r\n        style={{\r\n          marginBottom: '20px',\r\n          padding: '10px',\r\n          backgroundColor: '#007bff',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '4px',\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        {isLoading ? 'Processing...' : 'Run Auto-Upload'}\r\n      </button>\r\n      {message && <p style={{ color: 'green' }}>{message}</p>}\r\n      {processedFiles.length > 0 && (\r\n        <div>\r\n          <h3>Processed Files:</h3>\r\n          <ul>\r\n            {processedFiles.map((file, index) => (\r\n              <li key={index}>\r\n                {file.filename} (Source: {file.source}): {file.state} - {file.status}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AutoUploadManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}