{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\OAD_Auto\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\ListSources.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListSources() {\n  _s();\n  const [globalSources, setGlobalSources] = useState([]);\n  const [privateSources, setPrivateSources] = useState([]);\n  const [selectedSource, setSelectedSource] = useState(null);\n  const [documents, setDocuments] = useState([]);\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [replacementFile, setReplacementFile] = useState(null);\n  const [documentToReplace, setDocumentToReplace] = useState(null);\n  const refreshData = async () => {\n    await fetchSources();\n    if (selectedSource) {\n      await fetchDocuments(selectedSource);\n    }\n  };\n  useEffect(() => {\n    refreshData();\n  }, []);\n  const fetchSources = async () => {\n    setIsLoading(true);\n    setMessage('');\n    try {\n      const response = await axios.get('/chatbot1/list-sources/', {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        setGlobalSources(response.data.global_sources || []);\n        setPrivateSources(response.data.private_sources || []);\n      } else {\n        setMessage('An error occurred while fetching the sources.');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error during source fetching:', error);\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'An error occurred while fetching the sources.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchDocuments = async source => {\n    setIsLoading(true);\n    setMessage('');\n    setSelectedSource(source);\n    try {\n      const response = await axios.get(`/chatbot1/list-documents/${source}/`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 200 && response.data.documents) {\n        setDocuments(response.data.documents.documents.map(doc => ({\n          ...doc,\n          path: doc.path || `/chatbot1/media/documents/${source}/${doc.filename}`\n        })));\n        setMessage(response.data.documents.documents.length === 0 ? 'No documents found.' : '');\n      } else {\n        setMessage('An error occurred while fetching the documents.');\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error during document fetching:', error);\n      setMessage(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'An error occurred while fetching the documents.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getCookie = name => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === `${name}=`) {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  };\n  const handleSyncSource = async () => {\n    try {\n      const response = await axios.post(`/chatbot1/sync-source/${selectedSource}/`, {}, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      alert(response.data.message);\n      fetchDocuments(selectedSource);\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      console.error('Error syncing source:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n      alert(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'An error occurred during synchronization. Please check the server logs for more details.');\n    }\n  };\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleReplacementFileChange = event => {\n    setReplacementFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!selectedFile || !selectedSource) {\n      setMessage('Please select a file and a source to upload.');\n      return;\n    }\n    setIsLoading(true);\n    setUploadProgress(0);\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      const response = await axios.post(`/chatbot1/upload-document/${selectedSource}/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true,\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setUploadProgress(percentCompleted);\n        }\n      });\n      console.log('Full API Response:', response.data);\n      if (response.data.status === 'PENDING') {\n        setMessage(`Upload initiated. Task ID: ${response.data.task_id}. Checking status...`);\n        pollUploadStatus(selectedSource, response.data.task_id);\n      } else {\n        setMessage(`Status: ${response.data.status}\\nMessage: ${response.data.message}\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\n        if (response.data.status === 'SUCCESS') {\n          setSelectedFile(null);\n          await fetchDocuments(selectedSource);\n        }\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data, _error$response6;\n      console.error('Error uploading document:', error);\n      setMessage(`Error: ${((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'An error occurred while uploading the document.'}\\nFull Error: ${JSON.stringify((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data, null, 2)}`);\n    } finally {\n      setIsLoading(false);\n      setUploadProgress(0);\n    }\n  };\n  const handleReplace = async () => {\n    if (!replacementFile || !documentToReplace) {\n      setMessage('Please select a document to replace and the new replacement file.');\n      return;\n    }\n    setIsLoading(true);\n    setUploadProgress(0);\n    const formData = new FormData();\n    formData.append('file', replacementFile);\n    try {\n      const response = await axios.post(`/chatbot1/replace-document/${selectedSource}/${documentToReplace}/`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true,\n        onUploadProgress: progressEvent => {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setUploadProgress(percentCompleted);\n        }\n      });\n      console.log('Replace API Response:', response.data);\n      if (response.data.status === 'PENDING') {\n        setMessage(`Replacement initiated. Task ID: ${response.data.task_id}. Checking status...`);\n        pollUploadStatus(selectedSource, response.data.task_id);\n      } else {\n        setMessage(`Status: ${response.data.status}\\nMessage: ${response.data.message}\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\n        if (response.data.status === 'SUCCESS') {\n          setReplacementFile(null);\n          await fetchDocuments(selectedSource);\n        }\n      }\n    } catch (error) {\n      var _error$response7, _error$response7$data, _error$response8;\n      console.error('Error replacing document:', error);\n      setMessage(`Error: ${((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'An error occurred while replacing the document.'}\\nFull Error: ${JSON.stringify((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data, null, 2)}`);\n    } finally {\n      setIsLoading(false);\n      setUploadProgress(0);\n    }\n  };\n  const pollUploadStatus = async (source, taskId, maxAttempts = 10) => {\n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        const response = await axios.get(`/chatbot1/check-upload-status/${source}/${taskId}/`, {\n          headers: {\n            'X-CSRFToken': getCookie('csrftoken')\n          },\n          withCredentials: true\n        });\n        console.log('Poll response:', response.data);\n        if (response.data.status === 'SUCCESS') {\n          setMessage(`Upload completed successfully.\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\n          await fetchDocuments(source);\n          return;\n        } else if (response.data.status === 'ERROR') {\n          setMessage(`Upload failed.\\nError: ${response.data.message}\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\n          return;\n        }\n        setMessage(`Upload still in progress. Checking again in 5 seconds...\\nCurrent status: ${response.data.status}`);\n        await new Promise(resolve => setTimeout(resolve, 5000));\n      } catch (error) {\n        var _error$response9, _error$response9$data, _error$response10;\n        console.error('Error checking upload status:', error);\n        setMessage(`Error checking upload status.\\nError: ${((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'An error occurred while checking the upload status.'}\\nFull Error: ${JSON.stringify((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data, null, 2)}`);\n      }\n    }\n    setMessage('Upload status check timed out.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sources\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => fetchDocuments(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Source\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), globalSources.map(source => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: source,\n          children: source\n        }, source, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)), privateSources.map(source => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: source,\n          children: source\n        }, source, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSyncSource,\n        disabled: !selectedSource,\n        children: \"Sync Source\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Documents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: documents.map(doc => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: doc.path,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: doc.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDocumentToReplace(doc.filename),\n            children: \"Replace\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)]\n        }, doc.filename, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload New Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        disabled: !selectedFile || isLoading,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Progress: \", uploadProgress, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Replace Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setDocumentToReplace(e.target.value),\n        value: documentToReplace,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Document to Replace\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), documents.map(doc => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: doc.filename,\n          children: doc.filename\n        }, doc.filename, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleReplacementFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReplace,\n        disabled: !replacementFile || !documentToReplace || isLoading,\n        children: \"Replace\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n}\n_s(ListSources, \"7Ta2LGUDJ+OqYIuiT6TFsTsrta8=\");\n_c = ListSources;\nexport default ListSources;\nvar _c;\n$RefreshReg$(_c, \"ListSources\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ListSources","_s","globalSources","setGlobalSources","privateSources","setPrivateSources","selectedSource","setSelectedSource","documents","setDocuments","message","setMessage","isLoading","setIsLoading","selectedFile","setSelectedFile","uploadProgress","setUploadProgress","replacementFile","setReplacementFile","documentToReplace","setDocumentToReplace","refreshData","fetchSources","fetchDocuments","response","get","headers","getCookie","withCredentials","status","data","global_sources","private_sources","error","_error$response","_error$response$data","console","source","map","doc","path","filename","length","_error$response2","_error$response2$data","name","cookieValue","document","cookie","cookies","split","i","trim","substring","decodeURIComponent","handleSyncSource","post","alert","_error$response3","_error$response4","_error$response4$data","handleFileChange","event","target","files","handleReplacementFileChange","handleUpload","formData","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","log","task_id","pollUploadStatus","JSON","stringify","full_response","_error$response5","_error$response5$data","_error$response6","handleReplace","_error$response7","_error$response7$data","_error$response8","taskId","maxAttempts","Promise","resolve","setTimeout","_error$response9","_error$response9$data","_error$response10","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","value","onClick","disabled","href","rel","type","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/ListSources.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ListSources() {\r\n  const [globalSources, setGlobalSources] = useState([]);\r\n  const [privateSources, setPrivateSources] = useState([]);\r\n  const [selectedSource, setSelectedSource] = useState(null);\r\n  const [documents, setDocuments] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [replacementFile, setReplacementFile] = useState(null);\r\n  const [documentToReplace, setDocumentToReplace] = useState(null);\r\n\r\n  const refreshData = async () => {\r\n    await fetchSources();\r\n    if (selectedSource) {\r\n      await fetchDocuments(selectedSource);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshData();\r\n  }, []);\r\n\r\n  const fetchSources = async () => {\r\n    setIsLoading(true);\r\n    setMessage('');\r\n\r\n    try {\r\n      const response = await axios.get('/chatbot1/list-sources/', {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setGlobalSources(response.data.global_sources || []);\r\n        setPrivateSources(response.data.private_sources || []);\r\n      } else {\r\n        setMessage('An error occurred while fetching the sources.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during source fetching:', error);\r\n      setMessage(error.response?.data?.error || 'An error occurred while fetching the sources.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchDocuments = async (source) => {\r\n    setIsLoading(true);\r\n    setMessage('');\r\n    setSelectedSource(source);\r\n\r\n    try {\r\n      const response = await axios.get(`/chatbot1/list-documents/${source}/`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200 && response.data.documents) {\r\n        setDocuments(response.data.documents.documents.map(doc => ({\r\n          ...doc,\r\n          path: doc.path || `/chatbot1/media/documents/${source}/${doc.filename}`\r\n        })));\r\n        setMessage(response.data.documents.documents.length === 0 ? 'No documents found.' : '');\r\n      } else {\r\n        setMessage('An error occurred while fetching the documents.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during document fetching:', error);\r\n      setMessage(error.response?.data?.error || 'An error occurred while fetching the documents.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const getCookie = (name) => {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === `${name}=`) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  };\r\n\r\n  const handleSyncSource = async () => {\r\n    try {\r\n      const response = await axios.post(`/chatbot1/sync-source/${selectedSource}/`, {}, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n      alert(response.data.message);\r\n      fetchDocuments(selectedSource);\r\n    } catch (error) {\r\n      console.error('Error syncing source:', error);\r\n      console.error('Error details:', error.response?.data);\r\n      alert(error.response?.data?.error || 'An error occurred during synchronization. Please check the server logs for more details.');\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleReplacementFileChange = (event) => {\r\n    setReplacementFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedFile || !selectedSource) {\r\n      setMessage('Please select a file and a source to upload.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setUploadProgress(0);\r\n    const formData = new FormData();\r\n    formData.append('file', selectedFile);\r\n\r\n    try {\r\n      const response = await axios.post(`/chatbot1/upload-document/${selectedSource}/`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true,\r\n        onUploadProgress: (progressEvent) => {\r\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          setUploadProgress(percentCompleted);\r\n        }\r\n      });\r\n\r\n      console.log('Full API Response:', response.data);\r\n\r\n      if (response.data.status === 'PENDING') {\r\n        setMessage(`Upload initiated. Task ID: ${response.data.task_id}. Checking status...`);\r\n        pollUploadStatus(selectedSource, response.data.task_id);\r\n      } else {\r\n        setMessage(`Status: ${response.data.status}\\nMessage: ${response.data.message}\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\r\n        if (response.data.status === 'SUCCESS') {\r\n          setSelectedFile(null);\r\n          await fetchDocuments(selectedSource);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading document:', error);\r\n      setMessage(`Error: ${error.response?.data?.message || 'An error occurred while uploading the document.'}\\nFull Error: ${JSON.stringify(error.response?.data, null, 2)}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  };\r\n\r\n  const handleReplace = async () => {\r\n    if (!replacementFile || !documentToReplace) {\r\n      setMessage('Please select a document to replace and the new replacement file.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setUploadProgress(0);\r\n    const formData = new FormData();\r\n    formData.append('file', replacementFile);\r\n\r\n    try {\r\n      const response = await axios.post(`/chatbot1/replace-document/${selectedSource}/${documentToReplace}/`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true,\r\n        onUploadProgress: (progressEvent) => {\r\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n          setUploadProgress(percentCompleted);\r\n        }\r\n      });\r\n\r\n      console.log('Replace API Response:', response.data);\r\n\r\n      if (response.data.status === 'PENDING') {\r\n        setMessage(`Replacement initiated. Task ID: ${response.data.task_id}. Checking status...`);\r\n        pollUploadStatus(selectedSource, response.data.task_id);\r\n      } else {\r\n        setMessage(`Status: ${response.data.status}\\nMessage: ${response.data.message}\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\r\n        if (response.data.status === 'SUCCESS') {\r\n          setReplacementFile(null);\r\n          await fetchDocuments(selectedSource);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error replacing document:', error);\r\n      setMessage(`Error: ${error.response?.data?.message || 'An error occurred while replacing the document.'}\\nFull Error: ${JSON.stringify(error.response?.data, null, 2)}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  };\r\n\r\n  const pollUploadStatus = async (source, taskId, maxAttempts = 10) => {\r\n    for (let i = 0; i < maxAttempts; i++) {\r\n      try {\r\n        const response = await axios.get(`/chatbot1/check-upload-status/${source}/${taskId}/`, {\r\n          headers: {\r\n            'X-CSRFToken': getCookie('csrftoken'),\r\n          },\r\n          withCredentials: true\r\n        });\r\n\r\n        console.log('Poll response:', response.data);\r\n\r\n        if (response.data.status === 'SUCCESS') {\r\n          setMessage(`Upload completed successfully.\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\r\n          await fetchDocuments(source);\r\n          return;\r\n        } else if (response.data.status === 'ERROR') {\r\n          setMessage(`Upload failed.\\nError: ${response.data.message}\\nFull Response: ${JSON.stringify(response.data.full_response, null, 2)}`);\r\n          return;\r\n        }\r\n\r\n        setMessage(`Upload still in progress. Checking again in 5 seconds...\\nCurrent status: ${response.data.status}`);\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n      } catch (error) {\r\n        console.error('Error checking upload status:', error);\r\n        setMessage(`Error checking upload status.\\nError: ${error.response?.data?.message || 'An error occurred while checking the upload status.'}\\nFull Error: ${JSON.stringify(error.response?.data, null, 2)}`);\r\n      }\r\n    }\r\n\r\n    setMessage('Upload status check timed out.');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && <div>Loading...</div>}\r\n      <div>\r\n        <h2>Sources</h2>\r\n        <select onChange={(e) => fetchDocuments(e.target.value)}>\r\n          <option value=\"\">Select a Source</option>\r\n          {globalSources.map(source => (\r\n            <option key={source} value={source}>{source}</option>\r\n          ))}\r\n          {privateSources.map(source => (\r\n            <option key={source} value={source}>{source}</option>\r\n          ))}\r\n        </select>\r\n        <button onClick={handleSyncSource} disabled={!selectedSource}>Sync Source</button>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Documents</h2>\r\n        <ul>\r\n          {documents.map(doc => (\r\n            <li key={doc.filename}>\r\n              <a href={doc.path} target=\"_blank\" rel=\"noopener noreferrer\">{doc.filename}</a>\r\n              <button onClick={() => setDocumentToReplace(doc.filename)}>Replace</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Upload New Document</h2>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <button onClick={handleUpload} disabled={!selectedFile || isLoading}>Upload</button>\r\n        <div>Progress: {uploadProgress}%</div>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Replace Document</h2>\r\n        <select onChange={(e) => setDocumentToReplace(e.target.value)} value={documentToReplace}>\r\n          <option value=\"\">Select Document to Replace</option>\r\n          {documents.map(doc => (\r\n            <option key={doc.filename} value={doc.filename}>{doc.filename}</option>\r\n          ))}\r\n        </select>\r\n        <input type=\"file\" onChange={handleReplacementFileChange} />\r\n        <button onClick={handleReplace} disabled={!replacementFile || !documentToReplace || isLoading}>Replace</button>\r\n      </div>\r\n\r\n      {message && <div>{message}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListSources;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACuB,eAAe,EAAEC,kBAAkB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACyB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAEhE,MAAM2B,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,YAAY,CAAC,CAAC;IACpB,IAAIjB,cAAc,EAAE;MAClB,MAAMkB,cAAc,CAAClB,cAAc,CAAC;IACtC;EACF,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd0B,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BV,YAAY,CAAC,IAAI,CAAC;IAClBF,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,yBAAyB,EAAE;QAC1DC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,aAAa,EAAEC,SAAS,CAAC,WAAW;QACtC,CAAC;QACDC,eAAe,EAAE;MACnB,CAAC,CAAC;MAEF,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QAC3B3B,gBAAgB,CAACsB,QAAQ,CAACM,IAAI,CAACC,cAAc,IAAI,EAAE,CAAC;QACpD3B,iBAAiB,CAACoB,QAAQ,CAACM,IAAI,CAACE,eAAe,IAAI,EAAE,CAAC;MACxD,CAAC,MAAM;QACLtB,UAAU,CAAC,+CAA+C,CAAC;MAC7D;IACF,CAAC,CAAC,OAAOuB,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdC,OAAO,CAACH,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDvB,UAAU,CAAC,EAAAwB,eAAA,GAAAD,KAAK,CAACT,QAAQ,cAAAU,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBJ,IAAI,cAAAK,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI,+CAA+C,CAAC;IAC5F,CAAC,SAAS;MACRrB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMW,cAAc,GAAG,MAAOc,MAAM,IAAK;IACvCzB,YAAY,CAAC,IAAI,CAAC;IAClBF,UAAU,CAAC,EAAE,CAAC;IACdJ,iBAAiB,CAAC+B,MAAM,CAAC;IAEzB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,4BAA4BY,MAAM,GAAG,EAAE;QACtEX,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,aAAa,EAAEC,SAAS,CAAC,WAAW;QACtC,CAAC;QACDC,eAAe,EAAE;MACnB,CAAC,CAAC;MAEF,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAIL,QAAQ,CAACM,IAAI,CAACvB,SAAS,EAAE;QACtDC,YAAY,CAACgB,QAAQ,CAACM,IAAI,CAACvB,SAAS,CAACA,SAAS,CAAC+B,GAAG,CAACC,GAAG,KAAK;UACzD,GAAGA,GAAG;UACNC,IAAI,EAAED,GAAG,CAACC,IAAI,IAAI,6BAA6BH,MAAM,IAAIE,GAAG,CAACE,QAAQ;QACvE,CAAC,CAAC,CAAC,CAAC;QACJ/B,UAAU,CAACc,QAAQ,CAACM,IAAI,CAACvB,SAAS,CAACA,SAAS,CAACmC,MAAM,KAAK,CAAC,GAAG,qBAAqB,GAAG,EAAE,CAAC;MACzF,CAAC,MAAM;QACLhC,UAAU,CAAC,iDAAiD,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOuB,KAAK,EAAE;MAAA,IAAAU,gBAAA,EAAAC,qBAAA;MACdR,OAAO,CAACH,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDvB,UAAU,CAAC,EAAAiC,gBAAA,GAAAV,KAAK,CAACT,QAAQ,cAAAmB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBb,IAAI,cAAAc,qBAAA,uBAApBA,qBAAA,CAAsBX,KAAK,KAAI,iDAAiD,CAAC;IAC9F,CAAC,SAAS;MACRrB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMe,SAAS,GAAIkB,IAAI,IAAK;IAC1B,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,EAAE,EAAE;MAC7C,MAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;MAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACP,MAAM,EAAES,CAAC,EAAE,EAAE;QACvC,MAAMH,MAAM,GAAGC,OAAO,CAACE,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;QAChC,IAAIJ,MAAM,CAACK,SAAS,CAAC,CAAC,EAAER,IAAI,CAACH,MAAM,GAAG,CAAC,CAAC,KAAK,GAAGG,IAAI,GAAG,EAAE;UACvDC,WAAW,GAAGQ,kBAAkB,CAACN,MAAM,CAACK,SAAS,CAACR,IAAI,CAACH,MAAM,GAAG,CAAC,CAAC,CAAC;UACnE;QACF;MACF;IACF;IACA,OAAOI,WAAW;EACpB,CAAC;EAED,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAM5B,KAAK,CAAC4D,IAAI,CAAC,yBAAyBnD,cAAc,GAAG,EAAE,CAAC,CAAC,EAAE;QAChFqB,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,aAAa,EAAEC,SAAS,CAAC,WAAW;QACtC,CAAC;QACDC,eAAe,EAAE;MACnB,CAAC,CAAC;MACF6B,KAAK,CAACjC,QAAQ,CAACM,IAAI,CAACrB,OAAO,CAAC;MAC5Bc,cAAc,CAAClB,cAAc,CAAC;IAChC,CAAC,CAAC,OAAO4B,KAAK,EAAE;MAAA,IAAAyB,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACdxB,OAAO,CAACH,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CG,OAAO,CAACH,KAAK,CAAC,gBAAgB,GAAAyB,gBAAA,GAAEzB,KAAK,CAACT,QAAQ,cAAAkC,gBAAA,uBAAdA,gBAAA,CAAgB5B,IAAI,CAAC;MACrD2B,KAAK,CAAC,EAAAE,gBAAA,GAAA1B,KAAK,CAACT,QAAQ,cAAAmC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7B,IAAI,cAAA8B,qBAAA,uBAApBA,qBAAA,CAAsB3B,KAAK,KAAI,0FAA0F,CAAC;IAClI;EACF,CAAC;EAED,MAAM4B,gBAAgB,GAAIC,KAAK,IAAK;IAClChD,eAAe,CAACgD,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,CAAC;EAED,MAAMC,2BAA2B,GAAIH,KAAK,IAAK;IAC7C5C,kBAAkB,CAAC4C,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;EAED,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACrD,YAAY,IAAI,CAACR,cAAc,EAAE;MACpCK,UAAU,CAAC,8CAA8C,CAAC;MAC1D;IACF;IAEAE,YAAY,CAAC,IAAI,CAAC;IAClBI,iBAAiB,CAAC,CAAC,CAAC;IACpB,MAAMmD,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAExD,YAAY,CAAC;IAErC,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAM5B,KAAK,CAAC4D,IAAI,CAAC,6BAA6BnD,cAAc,GAAG,EAAE8D,QAAQ,EAAE;QAC1FzC,OAAO,EAAE;UACP,cAAc,EAAE,qBAAqB;UACrC,aAAa,EAAEC,SAAS,CAAC,WAAW;QACtC,CAAC;QACDC,eAAe,EAAE,IAAI;QACrB0C,gBAAgB,EAAGC,aAAa,IAAK;UACnC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;UACvF5D,iBAAiB,CAACwD,gBAAgB,CAAC;QACrC;MACF,CAAC,CAAC;MAEFpC,OAAO,CAACyC,GAAG,CAAC,oBAAoB,EAAErD,QAAQ,CAACM,IAAI,CAAC;MAEhD,IAAIN,QAAQ,CAACM,IAAI,CAACD,MAAM,KAAK,SAAS,EAAE;QACtCnB,UAAU,CAAC,8BAA8Bc,QAAQ,CAACM,IAAI,CAACgD,OAAO,sBAAsB,CAAC;QACrFC,gBAAgB,CAAC1E,cAAc,EAAEmB,QAAQ,CAACM,IAAI,CAACgD,OAAO,CAAC;MACzD,CAAC,MAAM;QACLpE,UAAU,CAAC,WAAWc,QAAQ,CAACM,IAAI,CAACD,MAAM,cAAcL,QAAQ,CAACM,IAAI,CAACrB,OAAO,oBAAoBuE,IAAI,CAACC,SAAS,CAACzD,QAAQ,CAACM,IAAI,CAACoD,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;QACxJ,IAAI1D,QAAQ,CAACM,IAAI,CAACD,MAAM,KAAK,SAAS,EAAE;UACtCf,eAAe,CAAC,IAAI,CAAC;UACrB,MAAMS,cAAc,CAAClB,cAAc,CAAC;QACtC;MACF;IACF,CAAC,CAAC,OAAO4B,KAAK,EAAE;MAAA,IAAAkD,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA;MACdjD,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDvB,UAAU,CAAC,UAAU,EAAAyE,gBAAA,GAAAlD,KAAK,CAACT,QAAQ,cAAA2D,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBrD,IAAI,cAAAsD,qBAAA,uBAApBA,qBAAA,CAAsB3E,OAAO,KAAI,iDAAiD,iBAAiBuE,IAAI,CAACC,SAAS,EAAAI,gBAAA,GAACpD,KAAK,CAACT,QAAQ,cAAA6D,gBAAA,uBAAdA,gBAAA,CAAgBvD,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;IAC1K,CAAC,SAAS;MACRlB,YAAY,CAAC,KAAK,CAAC;MACnBI,iBAAiB,CAAC,CAAC,CAAC;IACtB;EACF,CAAC;EAED,MAAMsE,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACrE,eAAe,IAAI,CAACE,iBAAiB,EAAE;MAC1CT,UAAU,CAAC,mEAAmE,CAAC;MAC/E;IACF;IAEAE,YAAY,CAAC,IAAI,CAAC;IAClBI,iBAAiB,CAAC,CAAC,CAAC;IACpB,MAAMmD,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEpD,eAAe,CAAC;IAExC,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAM5B,KAAK,CAAC4D,IAAI,CAAC,8BAA8BnD,cAAc,IAAIc,iBAAiB,GAAG,EAAEgD,QAAQ,EAAE;QAChHzC,OAAO,EAAE;UACP,cAAc,EAAE,qBAAqB;UACrC,aAAa,EAAEC,SAAS,CAAC,WAAW;QACtC,CAAC;QACDC,eAAe,EAAE,IAAI;QACrB0C,gBAAgB,EAAGC,aAAa,IAAK;UACnC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;UACvF5D,iBAAiB,CAACwD,gBAAgB,CAAC;QACrC;MACF,CAAC,CAAC;MAEFpC,OAAO,CAACyC,GAAG,CAAC,uBAAuB,EAAErD,QAAQ,CAACM,IAAI,CAAC;MAEnD,IAAIN,QAAQ,CAACM,IAAI,CAACD,MAAM,KAAK,SAAS,EAAE;QACtCnB,UAAU,CAAC,mCAAmCc,QAAQ,CAACM,IAAI,CAACgD,OAAO,sBAAsB,CAAC;QAC1FC,gBAAgB,CAAC1E,cAAc,EAAEmB,QAAQ,CAACM,IAAI,CAACgD,OAAO,CAAC;MACzD,CAAC,MAAM;QACLpE,UAAU,CAAC,WAAWc,QAAQ,CAACM,IAAI,CAACD,MAAM,cAAcL,QAAQ,CAACM,IAAI,CAACrB,OAAO,oBAAoBuE,IAAI,CAACC,SAAS,CAACzD,QAAQ,CAACM,IAAI,CAACoD,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;QACxJ,IAAI1D,QAAQ,CAACM,IAAI,CAACD,MAAM,KAAK,SAAS,EAAE;UACtCX,kBAAkB,CAAC,IAAI,CAAC;UACxB,MAAMK,cAAc,CAAClB,cAAc,CAAC;QACtC;MACF;IACF,CAAC,CAAC,OAAO4B,KAAK,EAAE;MAAA,IAAAsD,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA;MACdrD,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDvB,UAAU,CAAC,UAAU,EAAA6E,gBAAA,GAAAtD,KAAK,CAACT,QAAQ,cAAA+D,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBzD,IAAI,cAAA0D,qBAAA,uBAApBA,qBAAA,CAAsB/E,OAAO,KAAI,iDAAiD,iBAAiBuE,IAAI,CAACC,SAAS,EAAAQ,gBAAA,GAACxD,KAAK,CAACT,QAAQ,cAAAiE,gBAAA,uBAAdA,gBAAA,CAAgB3D,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;IAC1K,CAAC,SAAS;MACRlB,YAAY,CAAC,KAAK,CAAC;MACnBI,iBAAiB,CAAC,CAAC,CAAC;IACtB;EACF,CAAC;EAED,MAAM+D,gBAAgB,GAAG,MAAAA,CAAO1C,MAAM,EAAEqD,MAAM,EAAEC,WAAW,GAAG,EAAE,KAAK;IACnE,KAAK,IAAIxC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,WAAW,EAAExC,CAAC,EAAE,EAAE;MACpC,IAAI;QACF,MAAM3B,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,iCAAiCY,MAAM,IAAIqD,MAAM,GAAG,EAAE;UACrFhE,OAAO,EAAE;YACP,aAAa,EAAEC,SAAS,CAAC,WAAW;UACtC,CAAC;UACDC,eAAe,EAAE;QACnB,CAAC,CAAC;QAEFQ,OAAO,CAACyC,GAAG,CAAC,gBAAgB,EAAErD,QAAQ,CAACM,IAAI,CAAC;QAE5C,IAAIN,QAAQ,CAACM,IAAI,CAACD,MAAM,KAAK,SAAS,EAAE;UACtCnB,UAAU,CAAC,kDAAkDsE,IAAI,CAACC,SAAS,CAACzD,QAAQ,CAACM,IAAI,CAACoD,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;UACpH,MAAM3D,cAAc,CAACc,MAAM,CAAC;UAC5B;QACF,CAAC,MAAM,IAAIb,QAAQ,CAACM,IAAI,CAACD,MAAM,KAAK,OAAO,EAAE;UAC3CnB,UAAU,CAAC,0BAA0Bc,QAAQ,CAACM,IAAI,CAACrB,OAAO,oBAAoBuE,IAAI,CAACC,SAAS,CAACzD,QAAQ,CAACM,IAAI,CAACoD,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;UACrI;QACF;QAEAxE,UAAU,CAAC,6EAA6Ec,QAAQ,CAACM,IAAI,CAACD,MAAM,EAAE,CAAC;QAC/G,MAAM,IAAI+D,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACzD,CAAC,CAAC,OAAO5D,KAAK,EAAE;QAAA,IAAA8D,gBAAA,EAAAC,qBAAA,EAAAC,iBAAA;QACd7D,OAAO,CAACH,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDvB,UAAU,CAAC,yCAAyC,EAAAqF,gBAAA,GAAA9D,KAAK,CAACT,QAAQ,cAAAuE,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBjE,IAAI,cAAAkE,qBAAA,uBAApBA,qBAAA,CAAsBvF,OAAO,KAAI,qDAAqD,iBAAiBuE,IAAI,CAACC,SAAS,EAAAgB,iBAAA,GAAChE,KAAK,CAACT,QAAQ,cAAAyE,iBAAA,uBAAdA,iBAAA,CAAgBnE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;MAC7M;IACF;IAEApB,UAAU,CAAC,gCAAgC,CAAC;EAC9C,CAAC;EAED,oBACEZ,OAAA;IAAAoG,QAAA,GACGvF,SAAS,iBAAIb,OAAA;MAAAoG,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnCxG,OAAA;MAAAoG,QAAA,gBACEpG,OAAA;QAAAoG,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBxG,OAAA;QAAQyG,QAAQ,EAAGC,CAAC,IAAKjF,cAAc,CAACiF,CAAC,CAACzC,MAAM,CAAC0C,KAAK,CAAE;QAAAP,QAAA,gBACtDpG,OAAA;UAAQ2G,KAAK,EAAC,EAAE;UAAAP,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACxCrG,aAAa,CAACqC,GAAG,CAACD,MAAM,iBACvBvC,OAAA;UAAqB2G,KAAK,EAAEpE,MAAO;UAAA6D,QAAA,EAAE7D;QAAM,GAA9BA,MAAM;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiC,CACrD,CAAC,EACDnG,cAAc,CAACmC,GAAG,CAACD,MAAM,iBACxBvC,OAAA;UAAqB2G,KAAK,EAAEpE,MAAO;UAAA6D,QAAA,EAAE7D;QAAM,GAA9BA,MAAM;UAAA8D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiC,CACrD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACTxG,OAAA;QAAQ4G,OAAO,EAAEnD,gBAAiB;QAACoD,QAAQ,EAAE,CAACtG,cAAe;QAAA6F,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CAAC,eAENxG,OAAA;MAAAoG,QAAA,gBACEpG,OAAA;QAAAoG,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBxG,OAAA;QAAAoG,QAAA,EACG3F,SAAS,CAAC+B,GAAG,CAACC,GAAG,iBAChBzC,OAAA;UAAAoG,QAAA,gBACEpG,OAAA;YAAG8G,IAAI,EAAErE,GAAG,CAACC,IAAK;YAACuB,MAAM,EAAC,QAAQ;YAAC8C,GAAG,EAAC,qBAAqB;YAAAX,QAAA,EAAE3D,GAAG,CAACE;UAAQ;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC/ExG,OAAA;YAAQ4G,OAAO,EAAEA,CAAA,KAAMtF,oBAAoB,CAACmB,GAAG,CAACE,QAAQ,CAAE;YAAAyD,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAFpE/D,GAAG,CAACE,QAAQ;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGjB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAENxG,OAAA;MAAAoG,QAAA,gBACEpG,OAAA;QAAAoG,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BxG,OAAA;QAAOgH,IAAI,EAAC,MAAM;QAACP,QAAQ,EAAE1C;MAAiB;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDxG,OAAA;QAAQ4G,OAAO,EAAExC,YAAa;QAACyC,QAAQ,EAAE,CAAC9F,YAAY,IAAIF,SAAU;QAAAuF,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpFxG,OAAA;QAAAoG,QAAA,GAAK,YAAU,EAACnF,cAAc,EAAC,GAAC;MAAA;QAAAoF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eAENxG,OAAA;MAAAoG,QAAA,gBACEpG,OAAA;QAAAoG,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBxG,OAAA;QAAQyG,QAAQ,EAAGC,CAAC,IAAKpF,oBAAoB,CAACoF,CAAC,CAACzC,MAAM,CAAC0C,KAAK,CAAE;QAACA,KAAK,EAAEtF,iBAAkB;QAAA+E,QAAA,gBACtFpG,OAAA;UAAQ2G,KAAK,EAAC,EAAE;UAAAP,QAAA,EAAC;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACnD/F,SAAS,CAAC+B,GAAG,CAACC,GAAG,iBAChBzC,OAAA;UAA2B2G,KAAK,EAAElE,GAAG,CAACE,QAAS;UAAAyD,QAAA,EAAE3D,GAAG,CAACE;QAAQ,GAAhDF,GAAG,CAACE,QAAQ;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA6C,CACvE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACTxG,OAAA;QAAOgH,IAAI,EAAC,MAAM;QAACP,QAAQ,EAAEtC;MAA4B;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5DxG,OAAA;QAAQ4G,OAAO,EAAEpB,aAAc;QAACqB,QAAQ,EAAE,CAAC1F,eAAe,IAAI,CAACE,iBAAiB,IAAIR,SAAU;QAAAuF,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5G,CAAC,EAEL7F,OAAO,iBAAIX,OAAA;MAAAoG,QAAA,EAAMzF;IAAO;MAAA0F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV;AAACtG,EAAA,CAvSQD,WAAW;AAAAgH,EAAA,GAAXhH,WAAW;AAySpB,eAAeA,WAAW;AAAC,IAAAgH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}