{"ast":null,"code":"const handleSendMessage = async e => {\n  e.preventDefault();\n  const message = e.target.message.value.trim();\n  if (message === '') return;\n  e.target.message.value = '';\n  setIsLoading(true);\n  setShowSpinner(true);\n  const newMessage = {\n    text: message,\n    sender: 'user'\n  };\n  setMessages(prevMessages => [...prevMessages, newMessage]);\n  try {\n    console.log('Sending request to backend:', {\n      question: message,\n      source: mysource\n    });\n    const resp = await axios.post('/chatbot1/search/', {\n      question: message,\n      source: mysource\n    });\n    console.log('Full response from backend:', resp);\n    if (resp.data && resp.data.response) {\n      let response = resp.data.response;\n\n      // ... (keep your existing response processing code here)\n\n      const botMessage = {\n        text: response,\n        sender: 'bot',\n        copyButton: true,\n        filenames: resp.data.references ? resp.data.references.map(ref => ref.filename) : []\n      };\n      setMessages(prevMessages => {\n        console.log('Updating messages with bot response:', [...prevMessages, botMessage]);\n        return [...prevMessages, botMessage];\n      });\n      if (conversationBoxRef.current) {\n        conversationBoxRef.current.scrollTop = conversationBoxRef.current.scrollHeight;\n      }\n    } else {\n      console.error('Unexpected response format:', resp.data);\n      setMessages(prevMessages => [...prevMessages, {\n        text: 'Error: Unexpected response format',\n        sender: 'bot'\n      }]);\n    }\n  } catch (error) {\n    console.error('Error sending message:', error);\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n      console.error('Error status:', error.response.status);\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error setting up request:', error.message);\n    }\n    setMessages(prevMessages => [...prevMessages, {\n      text: 'Error: Could not get response from server',\n      sender: 'bot'\n    }]);\n  } finally {\n    setIsLoading(false);\n    setShowSpinner(false);\n  }\n};","map":{"version":3,"names":["handleSendMessage","e","preventDefault","message","target","value","trim","setIsLoading","setShowSpinner","newMessage","text","sender","setMessages","prevMessages","console","log","question","source","mysource","resp","axios","post","data","response","botMessage","copyButton","filenames","references","map","ref","filename","conversationBoxRef","current","scrollTop","scrollHeight","error","status","request"],"sources":["C:/Users/AMX1/Desktop/django_test/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/Home.js"],"sourcesContent":["const handleSendMessage = async (e) => {\r\n  e.preventDefault();\r\n  const message = e.target.message.value.trim();\r\n  if (message === '') return;\r\n\r\n  e.target.message.value = '';\r\n  setIsLoading(true);\r\n  setShowSpinner(true);\r\n\r\n  const newMessage = { text: message, sender: 'user' };\r\n  setMessages(prevMessages => [...prevMessages, newMessage]);\r\n\r\n  try {\r\n    console.log('Sending request to backend:', { question: message, source: mysource });\r\n    const resp = await axios.post('/chatbot1/search/', {\r\n      question: message,\r\n      source: mysource\r\n    });\r\n\r\n    console.log('Full response from backend:', resp);\r\n\r\n    if (resp.data && resp.data.response) {\r\n      let response = resp.data.response;\r\n\r\n      // ... (keep your existing response processing code here)\r\n\r\n      const botMessage = {\r\n        text: response,\r\n        sender: 'bot',\r\n        copyButton: true,\r\n        filenames: resp.data.references ? resp.data.references.map((ref) => ref.filename) : [],\r\n      };\r\n\r\n      setMessages(prevMessages => {\r\n        console.log('Updating messages with bot response:', [...prevMessages, botMessage]);\r\n        return [...prevMessages, botMessage];\r\n      });\r\n\r\n      if (conversationBoxRef.current) {\r\n        conversationBoxRef.current.scrollTop = conversationBoxRef.current.scrollHeight;\r\n      }\r\n    } else {\r\n      console.error('Unexpected response format:', resp.data);\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { text: 'Error: Unexpected response format', sender: 'bot' }\r\n      ]);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n    if (error.response) {\r\n      console.error('Error response:', error.response.data);\r\n      console.error('Error status:', error.response.status);\r\n    } else if (error.request) {\r\n      console.error('No response received:', error.request);\r\n    } else {\r\n      console.error('Error setting up request:', error.message);\r\n    }\r\n    setMessages(prevMessages => [\r\n      ...prevMessages,\r\n      { text: 'Error: Could not get response from server', sender: 'bot' }\r\n    ]);\r\n  } finally {\r\n    setIsLoading(false);\r\n    setShowSpinner(false);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}