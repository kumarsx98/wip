{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\OAD_Auto\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\UploadDocument.js\",\n  _s = $RefreshSig$();\n// UploadDocument.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadDocument() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [splitPages, setSplitPages] = useState(false);\n  const [customFields, setCustomFields] = useState('');\n  const {\n    source\n  } = useParams();\n  const navigate = useNavigate();\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.size > 10 * 1024 * 1024) {\n      alert('File is too large. Maximum size is 10MB.');\n      e.target.value = null;\n    } else {\n      setFile(selectedFile);\n    }\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      alert('Please select a file to upload');\n      return;\n    }\n    setIsLoading(true);\n    setUploadStatus('Initiating upload...');\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('split_pages', splitPages);\n    if (customFields) formData.append('custom_fields', customFields);\n    try {\n      const response = await axios.post(`/api/v1/sources/${source}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 202) {\n        setUploadStatus('Upload accepted and is being processed.');\n        if (response.data && response.data.task_id) {\n          await checkUploadStatus(source, response.data.task_id);\n        } else {\n          await pollForDocument(source, file.name);\n        }\n      } else if (response.status === 201) {\n        setUploadStatus('Upload completed successfully.');\n        setTimeout(() => navigate(`/sources/${source}`), 2000);\n      } else {\n        setUploadStatus('Unexpected response. Please check the server logs.');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading document:', error);\n      setUploadStatus('Error: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Unknown error occurred'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const pollForDocument = async (sourceName, fileName, attempts = 0) => {\n    if (attempts > 12) {\n      setUploadStatus('Document processing is taking longer than expected. Please check back later.');\n      return;\n    }\n    try {\n      const response = await axios.get(`/api/v1/sources/${sourceName}/documents`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        const documents = response.data.documents;\n        if (documents.some(doc => doc.filename === fileName)) {\n          setUploadStatus('Document processed successfully.');\n          setTimeout(() => navigate(`/sources/${sourceName}`), 2000);\n        } else {\n          setUploadStatus(`Processing document... (Attempt ${attempts + 1})`);\n          setTimeout(() => pollForDocument(sourceName, fileName, attempts + 1), 5000);\n        }\n      } else {\n        setUploadStatus('Error checking document status. Please refresh the page.');\n      }\n    } catch (error) {\n      console.error('Error polling for document:', error);\n      setUploadStatus('Error checking document status. Please refresh the page.');\n    }\n  };\n  const checkUploadStatus = async (sourceName, taskId) => {\n    try {\n      const response = await axios.get(`/api/v1/sources/${sourceName}/documents/${taskId}/status`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.data.status === 'completed') {\n        setUploadStatus('Upload completed successfully.');\n        setTimeout(() => navigate(`/sources/${sourceName}`), 2000);\n      } else if (response.data.status === 'failed') {\n        setUploadStatus('Upload failed: ' + (response.data.error || 'Unknown error'));\n      } else {\n        setTimeout(() => checkUploadStatus(sourceName, taskId), 5000);\n      }\n    } catch (error) {\n      console.error('Error checking upload status:', error);\n      setUploadStatus('Error checking upload status. Please refresh the page.');\n    }\n  };\n  function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Upload Document to \", source]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: splitPages,\n          onChange: e => setSplitPages(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), \"Split Pages\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Custom Fields (JSON)\",\n        value: customFields,\n        onChange: e => setCustomFields(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Uploading...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: uploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(`/sources/${source}`),\n      children: \"Back to Documents\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadDocument, \"li6ft+tf6nnjF+Lf9vZy4YIygM0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UploadDocument;\nexport default UploadDocument;\nvar _c;\n$RefreshReg$(_c, \"UploadDocument\");","map":{"version":3,"names":["React","useState","axios","useParams","useNavigate","jsxDEV","_jsxDEV","UploadDocument","_s","file","setFile","uploadStatus","setUploadStatus","isLoading","setIsLoading","splitPages","setSplitPages","customFields","setCustomFields","source","navigate","handleFileChange","e","selectedFile","target","files","size","alert","value","handleUpload","preventDefault","formData","FormData","append","response","post","headers","getCookie","withCredentials","status","data","task_id","checkUploadStatus","pollForDocument","name","setTimeout","error","_error$response","_error$response$data","console","detail","message","sourceName","fileName","attempts","get","documents","some","doc","filename","taskId","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","children","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","checked","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/UploadDocument.js"],"sourcesContent":["// UploadDocument.js\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nfunction UploadDocument() {\r\n  const [file, setFile] = useState(null);\r\n  const [uploadStatus, setUploadStatus] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [splitPages, setSplitPages] = useState(false);\r\n  const [customFields, setCustomFields] = useState('');\r\n  const { source } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    if (selectedFile && selectedFile.size > 10 * 1024 * 1024) {\r\n      alert('File is too large. Maximum size is 10MB.');\r\n      e.target.value = null;\r\n    } else {\r\n      setFile(selectedFile);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n    if (!file) {\r\n      alert('Please select a file to upload');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setUploadStatus('Initiating upload...');\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('split_pages', splitPages);\r\n    if (customFields) formData.append('custom_fields', customFields);\r\n\r\n    try {\r\n      const response = await axios.post(`/api/v1/sources/${source}/documents`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true,\r\n      });\r\n\r\n      if (response.status === 202) {\r\n        setUploadStatus('Upload accepted and is being processed.');\r\n        if (response.data && response.data.task_id) {\r\n          await checkUploadStatus(source, response.data.task_id);\r\n        } else {\r\n          await pollForDocument(source, file.name);\r\n        }\r\n      } else if (response.status === 201) {\r\n        setUploadStatus('Upload completed successfully.');\r\n        setTimeout(() => navigate(`/sources/${source}`), 2000);\r\n      } else {\r\n        setUploadStatus('Unexpected response. Please check the server logs.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading document:', error);\r\n      setUploadStatus('Error: ' + (error.response?.data?.detail || error.message || 'Unknown error occurred'));\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const pollForDocument = async (sourceName, fileName, attempts = 0) => {\r\n    if (attempts > 12) {\r\n      setUploadStatus('Document processing is taking longer than expected. Please check back later.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`/api/v1/sources/${sourceName}/documents`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const documents = response.data.documents;\r\n        if (documents.some(doc => doc.filename === fileName)) {\r\n          setUploadStatus('Document processed successfully.');\r\n          setTimeout(() => navigate(`/sources/${sourceName}`), 2000);\r\n        } else {\r\n          setUploadStatus(`Processing document... (Attempt ${attempts + 1})`);\r\n          setTimeout(() => pollForDocument(sourceName, fileName, attempts + 1), 5000);\r\n        }\r\n      } else {\r\n        setUploadStatus('Error checking document status. Please refresh the page.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error polling for document:', error);\r\n      setUploadStatus('Error checking document status. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const checkUploadStatus = async (sourceName, taskId) => {\r\n    try {\r\n      const response = await axios.get(`/api/v1/sources/${sourceName}/documents/${taskId}/status`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.status === 'completed') {\r\n        setUploadStatus('Upload completed successfully.');\r\n        setTimeout(() => navigate(`/sources/${sourceName}`), 2000);\r\n      } else if (response.data.status === 'failed') {\r\n        setUploadStatus('Upload failed: ' + (response.data.error || 'Unknown error'));\r\n      } else {\r\n        setTimeout(() => checkUploadStatus(sourceName, taskId), 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking upload status:', error);\r\n      setUploadStatus('Error checking upload status. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Document to {source}</h2>\r\n      <form onSubmit={handleUpload}>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <label>\r\n          <input type=\"checkbox\" checked={splitPages} onChange={(e) => setSplitPages(e.target.checked)} />\r\n          Split Pages\r\n        </label>\r\n        <textarea\r\n          placeholder=\"Custom Fields (JSON)\"\r\n          value={customFields}\r\n          onChange={(e) => setCustomFields(e.target.value)}\r\n        />\r\n        <button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? 'Uploading...' : 'Upload'}\r\n        </button>\r\n      </form>\r\n      {uploadStatus && <p>{uploadStatus}</p>}\r\n      <button onClick={() => navigate(`/sources/${source}`)}>Back to Documents</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadDocument;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}