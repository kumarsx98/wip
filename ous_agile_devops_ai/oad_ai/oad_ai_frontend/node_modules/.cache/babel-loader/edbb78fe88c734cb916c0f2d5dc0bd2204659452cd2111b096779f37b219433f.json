{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\OAD_Auto\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\AutoUploadManager.js\",\n  _s = $RefreshSig$();\n// AutoUploadManager.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Fernet } from 'fernet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTO_UPLOAD_URL = 'http://localhost:3001/api/v1/auto-upload/';\n\n// Function to load the encryption key\nconst loadEncryptionKey = async () => {\n  try {\n    const response = await fetch('/encryption_key.txt');\n    const key = await response.text();\n    return key;\n  } catch (error) {\n    console.error('Error loading encryption key:', error);\n    throw error;\n  }\n};\n\n// Function to encrypt the API key\nconst encryptApiKey = async apiKey => {\n  const encryptionKey = await loadEncryptionKey();\n  const secret = new Fernet.Secret(encryptionKey);\n  const token = new Fernet.Token({\n    secret: secret,\n    token: null,\n    ttl: 0\n  });\n  return token.encode(apiKey);\n};\nfunction AutoUploadManager() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [processedFiles, setProcessedFiles] = useState([]);\n  const handleAutoUpload = async () => {\n    setIsLoading(true);\n    setMessage('');\n    try {\n      const apiKey = localStorage.getItem('apiKey');\n      if (!apiKey) {\n        throw new Error('No API key found in localStorage');\n      }\n      const encryptedApiKey = await encryptApiKey(apiKey);\n      const response = await axios.post(AUTO_UPLOAD_URL, {}, {\n        headers: {\n          'Authorization': `EncryptedKey ${encryptedApiKey}`\n        }\n      });\n      if (response.status === 200) {\n        setProcessedFiles(response.data.processed_files || []);\n        setMessage('Auto-upload process completed successfully.');\n      } else {\n        setMessage('An unexpected error occurred during auto-upload.');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error during auto-upload:', error);\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'An error occurred during auto-upload.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handleAutoUpload();\n    }, 5 * 60 * 1000); // Run every 5 minutes\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      backgroundColor: 'white',\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Auto-Upload Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAutoUpload,\n      disabled: isLoading,\n      style: {\n        marginBottom: '20px',\n        padding: '10px',\n        backgroundColor: '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '4px',\n        cursor: 'pointer'\n      },\n      children: isLoading ? 'Processing...' : 'Run Auto-Upload'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 19\n    }, this), processedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Processed Files:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: processedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.filename, \" (Source: \", file.source, \"): \", file.status]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(AutoUploadManager, \"M0WCgau0qO5mBKPv//UVx5BnQmQ=\");\n_c = AutoUploadManager;\nexport const startAutoUploadInterval = intervalInMinutes => {\n  const intervalInMilliseconds = intervalInMinutes * 60 * 1000;\n  return setInterval(handleAutoUpload, intervalInMilliseconds);\n};\nexport const stopAutoUploadInterval = intervalId => {\n  clearInterval(intervalId);\n};\nexport default AutoUploadManager;\nvar _c;\n$RefreshReg$(_c, \"AutoUploadManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","Fernet","jsxDEV","_jsxDEV","AUTO_UPLOAD_URL","loadEncryptionKey","response","fetch","key","text","error","console","encryptApiKey","apiKey","encryptionKey","secret","Secret","token","Token","ttl","encode","AutoUploadManager","_s","isLoading","setIsLoading","message","setMessage","processedFiles","setProcessedFiles","handleAutoUpload","localStorage","getItem","Error","encryptedApiKey","post","headers","status","data","processed_files","_error$response","_error$response$data","interval","setInterval","clearInterval","style","padding","backgroundColor","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","marginBottom","color","border","borderRadius","cursor","length","map","file","index","filename","source","_c","startAutoUploadInterval","intervalInMinutes","intervalInMilliseconds","stopAutoUploadInterval","intervalId","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/AutoUploadManager.js"],"sourcesContent":["// AutoUploadManager.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Fernet } from 'fernet';\r\n\r\nconst AUTO_UPLOAD_URL = 'http://localhost:3001/api/v1/auto-upload/';\r\n\r\n// Function to load the encryption key\r\nconst loadEncryptionKey = async () => {\r\n  try {\r\n    const response = await fetch('/encryption_key.txt');\r\n    const key = await response.text();\r\n    return key;\r\n  } catch (error) {\r\n    console.error('Error loading encryption key:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to encrypt the API key\r\nconst encryptApiKey = async (apiKey) => {\r\n  const encryptionKey = await loadEncryptionKey();\r\n  const secret = new Fernet.Secret(encryptionKey);\r\n  const token = new Fernet.Token({\r\n    secret: secret,\r\n    token: null,\r\n    ttl: 0\r\n  });\r\n  return token.encode(apiKey);\r\n};\r\n\r\nfunction AutoUploadManager() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [processedFiles, setProcessedFiles] = useState([]);\r\n\r\n  const handleAutoUpload = async () => {\r\n    setIsLoading(true);\r\n    setMessage('');\r\n\r\n    try {\r\n      const apiKey = localStorage.getItem('apiKey');\r\n      if (!apiKey) {\r\n        throw new Error('No API key found in localStorage');\r\n      }\r\n\r\n      const encryptedApiKey = await encryptApiKey(apiKey);\r\n\r\n      const response = await axios.post(AUTO_UPLOAD_URL, {}, {\r\n        headers: {\r\n          'Authorization': `EncryptedKey ${encryptedApiKey}`,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setProcessedFiles(response.data.processed_files || []);\r\n        setMessage('Auto-upload process completed successfully.');\r\n      } else {\r\n        setMessage('An unexpected error occurred during auto-upload.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during auto-upload:', error);\r\n      setMessage(error.response?.data?.message || error.message || 'An error occurred during auto-upload.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      handleAutoUpload();\r\n    }, 5 * 60 * 1000); // Run every 5 minutes\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: '20px', backgroundColor: 'white', maxWidth: '800px', margin: '0 auto' }}>\r\n      <h2>Auto-Upload Manager</h2>\r\n      <button\r\n        onClick={handleAutoUpload}\r\n        disabled={isLoading}\r\n        style={{\r\n          marginBottom: '20px',\r\n          padding: '10px',\r\n          backgroundColor: '#007bff',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '4px',\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        {isLoading ? 'Processing...' : 'Run Auto-Upload'}\r\n      </button>\r\n      {message && <p style={{ color: 'green' }}>{message}</p>}\r\n      {processedFiles.length > 0 && (\r\n        <div>\r\n          <h3>Processed Files:</h3>\r\n          <ul>\r\n            {processedFiles.map((file, index) => (\r\n              <li key={index}>\r\n                {file.filename} (Source: {file.source}): {file.status}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const startAutoUploadInterval = (intervalInMinutes) => {\r\n  const intervalInMilliseconds = intervalInMinutes * 60 * 1000;\r\n  return setInterval(handleAutoUpload, intervalInMilliseconds);\r\n};\r\n\r\nexport const stopAutoUploadInterval = (intervalId) => {\r\n  clearInterval(intervalId);\r\n};\r\n\r\nexport default AutoUploadManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}