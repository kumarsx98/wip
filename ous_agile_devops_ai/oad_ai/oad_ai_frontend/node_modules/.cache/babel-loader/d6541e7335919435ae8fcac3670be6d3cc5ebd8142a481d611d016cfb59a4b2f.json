{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\OAD_Auto\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\UploadDocument.js\",\n  _s = $RefreshSig$();\n// UploadDocument.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadDocument() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [splitPages, setSplitPages] = useState(false);\n  const [customFields, setCustomFields] = useState('');\n  const [progress, setProgress] = useState(0);\n  const {\n    source\n  } = useParams();\n  const navigate = useNavigate();\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.size > 10 * 1024 * 1024) {\n      alert('File is too large. Maximum size is 10MB.');\n      e.target.value = null;\n    } else {\n      setFile(selectedFile);\n    }\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      alert('Please select a file to upload');\n      return;\n    }\n    setIsLoading(true);\n    setUploadStatus('Initiating upload...');\n    setProgress(10);\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('split_pages', splitPages);\n    if (customFields) formData.append('custom_fields', customFields);\n    try {\n      const response = await axios.post(`/api/v1/sources/${source}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      console.log('Upload response:', response);\n      console.log('Task ID:', response.data.task_id);\n      if (response.status === 202) {\n        setUploadStatus('Upload accepted and is being processed.');\n        setProgress(30);\n        if (response.data && response.data.task_id) {\n          await checkDocumentStatus(response.data.task_id);\n        } else {\n          await pollForDocument(source, file.name);\n        }\n      } else if (response.status === 201) {\n        setUploadStatus('Upload completed successfully.');\n        setProgress(100);\n        setTimeout(() => navigate(`/sources/${source}`), 2000);\n      } else {\n        setUploadStatus('Unexpected response. Please check the server logs.');\n        setProgress(0);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading document:', error);\n      setUploadStatus('Error: ' + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Unknown error occurred'));\n      setProgress(0);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const checkDocumentStatus = async taskId => {\n    try {\n      const response = await axios.get(`/api/check-document-status/${taskId}/`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.data.status === \"PENDING\") {\n        setUploadStatus('Still processing...');\n        setProgress(60);\n        setTimeout(() => checkDocumentStatus(taskId), 5000); // Check every 5 seconds\n      } else {\n        updateUIWithStatus(response.data.status);\n      }\n    } catch (error) {\n      console.error('Error checking status:', error);\n      setUploadStatus('Error checking status. Please try again.');\n      setProgress(0);\n    }\n  };\n  const apiCall = async (url, options, retries = 3) => {\n    try {\n      const response = await axios(url, options);\n      return response;\n    } catch (error) {\n      if (retries > 0) {\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        return apiCall(url, options, retries - 1);\n      }\n      throw error;\n    }\n  };\n  const updateUIWithStatus = status => {\n    if (status === \"COMPLETE\") {\n      setUploadStatus('Document upload complete!');\n      setProgress(100);\n      setTimeout(() => navigate(`/sources/${source}`), 2000);\n    } else if (status === \"FAILED\") {\n      setUploadStatus('Document upload failed.');\n      setProgress(0);\n    } else {\n      setUploadStatus(`Unknown status: ${status}`);\n      setProgress(0);\n    }\n  };\n  const pollForDocument = async (sourceName, fileName, attempts = 0) => {\n    if (attempts > 20) {\n      // Increase max attempts\n      setUploadStatus('Document processing is taking longer than expected. Please check back later.');\n      setProgress(0);\n      return;\n    }\n    try {\n      const response = await axios.get(`/api/v1/sources/${sourceName}/documents`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCookie('csrftoken')\n        },\n        withCredentials: true\n      });\n      if (response.status === 200) {\n        const documents = response.data.documents;\n        console.log('Received documents:', documents);\n        if (documents.some(doc => doc.filename === fileName)) {\n          setUploadStatus('Document processed successfully.');\n          setProgress(100);\n          setTimeout(() => navigate(`/sources/${sourceName}`), 2000);\n        } else {\n          setUploadStatus(`Processing document... (Attempt ${attempts + 1})`);\n          setProgress(30 + attempts * 3); // Slower progress increase\n          setTimeout(() => pollForDocument(sourceName, fileName, attempts + 1), 10000); // Increase interval to 10 seconds\n        }\n      } else {\n        setUploadStatus('Error checking document status. Please refresh the page.');\n        setProgress(0);\n      }\n    } catch (error) {\n      console.error('Error polling for document:', error);\n      setUploadStatus('Error checking document status. Please refresh the page.');\n      setProgress(0);\n    }\n  };\n  function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n        const cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === name + '=') {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Upload Document to \", source]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: splitPages,\n          onChange: e => setSplitPages(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), \"Split Pages\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Custom Fields (JSON)\",\n        value: customFields,\n        onChange: e => setCustomFields(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Uploading...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: uploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '300px',\n        height: '20px',\n        backgroundColor: '#f0f0f0',\n        borderRadius: '10px',\n        margin: '10px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: `${progress}%`,\n          height: '100%',\n          backgroundColor: '#4CAF50',\n          borderRadius: '10px',\n          transition: 'width 0.5s'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(`/sources/${source}`),\n      children: \"Back to Documents\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadDocument, \"jNP7K4ByCAxkXryzNEWo7hUOdTE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = UploadDocument;\nexport default UploadDocument;\nvar _c;\n$RefreshReg$(_c, \"UploadDocument\");","map":{"version":3,"names":["React","useState","axios","useParams","useNavigate","jsxDEV","_jsxDEV","UploadDocument","_s","file","setFile","uploadStatus","setUploadStatus","isLoading","setIsLoading","splitPages","setSplitPages","customFields","setCustomFields","progress","setProgress","source","navigate","handleFileChange","e","selectedFile","target","files","size","alert","value","handleUpload","preventDefault","formData","FormData","append","response","post","headers","getCookie","withCredentials","console","log","data","task_id","status","checkDocumentStatus","pollForDocument","name","setTimeout","error","_error$response","_error$response$data","detail","message","taskId","get","updateUIWithStatus","apiCall","url","options","retries","Promise","resolve","sourceName","fileName","attempts","documents","some","doc","filename","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","children","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","checked","placeholder","disabled","style","width","height","backgroundColor","borderRadius","margin","transition","onClick","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/OAD_Auto/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/UploadDocument.js"],"sourcesContent":["// UploadDocument.js\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nfunction UploadDocument() {\r\n  const [file, setFile] = useState(null);\r\n  const [uploadStatus, setUploadStatus] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [splitPages, setSplitPages] = useState(false);\r\n  const [customFields, setCustomFields] = useState('');\r\n  const [progress, setProgress] = useState(0);\r\n  const { source } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    if (selectedFile && selectedFile.size > 10 * 1024 * 1024) {\r\n      alert('File is too large. Maximum size is 10MB.');\r\n      e.target.value = null;\r\n    } else {\r\n      setFile(selectedFile);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n    if (!file) {\r\n      alert('Please select a file to upload');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setUploadStatus('Initiating upload...');\r\n    setProgress(10);\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('split_pages', splitPages);\r\n    if (customFields) formData.append('custom_fields', customFields);\r\n\r\n    try {\r\n      const response = await axios.post(`/api/v1/sources/${source}/documents`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true,\r\n      });\r\n      console.log('Upload response:', response);\r\n      console.log('Task ID:', response.data.task_id);\r\n\r\n      if (response.status === 202) {\r\n        setUploadStatus('Upload accepted and is being processed.');\r\n        setProgress(30);\r\n        if (response.data && response.data.task_id) {\r\n          await checkDocumentStatus(response.data.task_id);\r\n        } else {\r\n          await pollForDocument(source, file.name);\r\n        }\r\n      } else if (response.status === 201) {\r\n        setUploadStatus('Upload completed successfully.');\r\n        setProgress(100);\r\n        setTimeout(() => navigate(`/sources/${source}`), 2000);\r\n      } else {\r\n        setUploadStatus('Unexpected response. Please check the server logs.');\r\n        setProgress(0);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading document:', error);\r\n      setUploadStatus('Error: ' + (error.response?.data?.detail || error.message || 'Unknown error occurred'));\r\n      setProgress(0);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkDocumentStatus = async (taskId) => {\r\n    try {\r\n      const response = await axios.get(`/api/check-document-status/${taskId}/`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCookie('csrftoken'),\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n      if (response.data.status === \"PENDING\") {\r\n        setUploadStatus('Still processing...');\r\n        setProgress(60);\r\n        setTimeout(() => checkDocumentStatus(taskId), 5000);  // Check every 5 seconds\r\n      } else {\r\n        updateUIWithStatus(response.data.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking status:', error);\r\n      setUploadStatus('Error checking status. Please try again.');\r\n      setProgress(0);\r\n    }\r\n  };\r\n  const apiCall = async (url, options, retries = 3) => {\r\n  try {\r\n    const response = await axios(url, options);\r\n    return response;\r\n  } catch (error) {\r\n    if (retries > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      return apiCall(url, options, retries - 1);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n  const updateUIWithStatus = (status) => {\r\n    if (status === \"COMPLETE\") {\r\n      setUploadStatus('Document upload complete!');\r\n      setProgress(100);\r\n      setTimeout(() => navigate(`/sources/${source}`), 2000);\r\n    } else if (status === \"FAILED\") {\r\n      setUploadStatus('Document upload failed.');\r\n      setProgress(0);\r\n    } else {\r\n      setUploadStatus(`Unknown status: ${status}`);\r\n      setProgress(0);\r\n    }\r\n  };\r\n\r\n  const pollForDocument = async (sourceName, fileName, attempts = 0) => {\r\n  if (attempts > 20) { // Increase max attempts\r\n    setUploadStatus('Document processing is taking longer than expected. Please check back later.');\r\n    setProgress(0);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(`/api/v1/sources/${sourceName}/documents`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-CSRFToken': getCookie('csrftoken'),\r\n      },\r\n      withCredentials: true\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      const documents = response.data.documents;\r\n      console.log('Received documents:', documents);\r\n      if (documents.some(doc => doc.filename === fileName)) {\r\n        setUploadStatus('Document processed successfully.');\r\n        setProgress(100);\r\n        setTimeout(() => navigate(`/sources/${sourceName}`), 2000);\r\n      } else {\r\n        setUploadStatus(`Processing document... (Attempt ${attempts + 1})`);\r\n        setProgress(30 + attempts * 3);  // Slower progress increase\r\n        setTimeout(() => pollForDocument(sourceName, fileName, attempts + 1), 10000); // Increase interval to 10 seconds\r\n      }\r\n    } else {\r\n      setUploadStatus('Error checking document status. Please refresh the page.');\r\n      setProgress(0);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error polling for document:', error);\r\n    setUploadStatus('Error checking document status. Please refresh the page.');\r\n    setProgress(0);\r\n  }\r\n};\r\n\r\n  function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n        const cookie = cookies[i].trim();\r\n        if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return cookieValue;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Document to {source}</h2>\r\n      <form onSubmit={handleUpload}>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <label>\r\n          <input type=\"checkbox\" checked={splitPages} onChange={(e) => setSplitPages(e.target.checked)} />\r\n          Split Pages\r\n        </label>\r\n        <textarea\r\n          placeholder=\"Custom Fields (JSON)\"\r\n          value={customFields}\r\n          onChange={(e) => setCustomFields(e.target.value)}\r\n        />\r\n        <button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? 'Uploading...' : 'Upload'}\r\n        </button>\r\n      </form>\r\n      {uploadStatus && <p>{uploadStatus}</p>}\r\n      <div style={{width: '300px', height: '20px', backgroundColor: '#f0f0f0', borderRadius: '10px', margin: '10px 0'}}>\r\n        <div style={{width: `${progress}%`, height: '100%', backgroundColor: '#4CAF50', borderRadius: '10px', transition: 'width 0.5s'}}></div>\r\n      </div>\r\n      <button onClick={() => navigate(`/sources/${source}`)}>Back to Documents</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default UploadDocument;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}