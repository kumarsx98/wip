{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AMX1\\\\Downloads\\\\Repo\\\\5-Sep\\\\ous_agile_devops_ai\\\\oad_ai\\\\oad_ai_frontend\\\\src\\\\ChatWithSource.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport Header from './Header';\nimport ConversationBox from './ConversationBox';\nimport InputBox from './InputBox';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWithSource = () => {\n  _s();\n  const {\n    sourceName\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const conversationBoxRef = useRef(null);\n  useEffect(() => {\n    if (conversationBoxRef.current) {\n      conversationBoxRef.current.scrollTop = conversationBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n  useEffect(() => {\n    // Ensure new data loading for changed sourceName\n    // You could add functions to fetch relevant data here if needed\n  }, [sourceName]);\n  const sendMessage = async () => {\n    if (!input) return;\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setIsLoading(true);\n    setShowSpinner(true);\n    try {\n      const response = await axios.post(`/chat-with-source/${sourceName}/`, {\n        question: input,\n        filters: JSON.stringify({})\n      });\n      console.log('Received response from API:', response.data);\n      let formattedContent = formatResponse(response.data.response.content);\n      const botMessage = {\n        text: formattedContent,\n        sender: 'bot',\n        copyButton: true,\n        filenames: response.data.response.references ? response.data.response.references.map(ref => ref.filename) : []\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        text: 'Sorry, an error occurred while processing your request.',\n        sender: 'bot',\n        copyButton: false\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsLoading(false);\n      setShowSpinner(false);\n      setInput('');\n    }\n  };\n  const formatResponse = response => {\n    // Custom formatting logic\n    response = response.replace(/\\[(.*?)\\]/g, '\\n\\n');\n    response = response.replace(/(\\w+)\\.\\n\\n/g, '$1\\n');\n    response = response.replace(/\\.\\n\\n/g, '.\\n');\n    response = response.replace(/^\\s+|\\s+$/g, '');\n    response = response.replace(/^\"|\"$/g, '');\n    response = response.replace(/\\.\\s+(\\d+)\\./g, '$1.');\n    response = response.replace(/^\\.\\s*/gm, '');\n    response = response.replace(/([^.\\n])$/gm, '.');\n\n    // Link and email formatting\n    const linkRegex = /(https?:\\/\\/[^\\s]+)/g;\n    const urlRegex = /go\\/([^\\s]+)/g;\n    const emailRegex = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/g;\n    response = response.replace(linkRegex, (match, url) => `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`);\n    response = response.replace(urlRegex, (match, sometext) => `<a href=\"http://go/${sometext}\" target=\"_blank\" rel=\"noopener noreferrer\">go/${sometext}</a>`);\n    response = response.replace(emailRegex, (match, email) => `<a href=\"mailto:${email}\">${email}</a>`);\n    return response;\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    sendMessage();\n  };\n  const chatbotClassName = sourceName === 'public' ? 'Chatbot-public' : 'Chatbot-internal';\n  const conversationBoxClassName = sourceName === 'public' ? 'conversation-box-public' : 'conversation-box-internal';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Chatbot ${chatbotClassName}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: `Chat with ${sourceName} Bot`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-subtitle\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You are interacting with the \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: sourceName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 49\n        }, this), \" source.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ConversationBox, {\n        className: conversationBoxClassName,\n        messages: messages,\n        isLoading: isLoading,\n        conversationBoxRef: conversationBoxRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n        question: input,\n        setQuestion: setInput,\n        handleSendMessage: handleSendMessage,\n        isLoading: isLoading,\n        showSpinner: showSpinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatWithSource, \"Fmz1F5mnxADfg0AgKoiq6OTFlkg=\", false, function () {\n  return [useParams];\n});\n_c = ChatWithSource;\nexport default ChatWithSource;\nvar _c;\n$RefreshReg$(_c, \"ChatWithSource\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","axios","Header","ConversationBox","InputBox","jsxDEV","_jsxDEV","ChatWithSource","_s","sourceName","messages","setMessages","input","setInput","isLoading","setIsLoading","showSpinner","setShowSpinner","conversationBoxRef","current","scrollTop","scrollHeight","sendMessage","userMessage","text","sender","prevMessages","response","post","question","filters","JSON","stringify","console","log","data","formattedContent","formatResponse","content","botMessage","copyButton","filenames","references","map","ref","filename","error","errorMessage","replace","linkRegex","urlRegex","emailRegex","match","url","sometext","email","handleSendMessage","e","preventDefault","chatbotClassName","conversationBoxClassName","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","setQuestion","_c","$RefreshReg$"],"sources":["C:/Users/AMX1/Downloads/Repo/5-Sep/ous_agile_devops_ai/oad_ai/oad_ai_frontend/src/ChatWithSource.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport ConversationBox from './ConversationBox';\r\nimport InputBox from './InputBox';\r\nimport './App.css';\r\n\r\nconst ChatWithSource = () => {\r\n    const { sourceName } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showSpinner, setShowSpinner] = useState(false);\r\n    const conversationBoxRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (conversationBoxRef.current) {\r\n            conversationBoxRef.current.scrollTop = conversationBoxRef.current.scrollHeight;\r\n        }\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        // Ensure new data loading for changed sourceName\r\n        // You could add functions to fetch relevant data here if needed\r\n    }, [sourceName]);\r\n\r\n    const sendMessage = async () => {\r\n        if (!input) return;\r\n\r\n        const userMessage = { text: input, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        setIsLoading(true);\r\n        setShowSpinner(true);\r\n\r\n        try {\r\n            const response = await axios.post(`/chat-with-source/${sourceName}/`, {\r\n                question: input,\r\n                filters: JSON.stringify({}),\r\n            });\r\n\r\n            console.log('Received response from API:', response.data);\r\n            let formattedContent = formatResponse(response.data.response.content);\r\n\r\n            const botMessage = {\r\n                text: formattedContent,\r\n                sender: 'bot',\r\n                copyButton: true,\r\n                filenames: response.data.response.references ? response.data.response.references.map((ref) => ref.filename) : [],\r\n            };\r\n\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n        } catch (error) {\r\n            console.error('Error sending message:', error);\r\n            const errorMessage = {\r\n                text: 'Sorry, an error occurred while processing your request.',\r\n                sender: 'bot',\r\n                copyButton: false,\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, errorMessage]);\r\n        } finally {\r\n            setIsLoading(false);\r\n            setShowSpinner(false);\r\n            setInput('');\r\n        }\r\n    };\r\n\r\n    const formatResponse = (response) => {\r\n        // Custom formatting logic\r\n        response = response.replace(/\\[(.*?)\\]/g, '\\n\\n');\r\n        response = response.replace(/(\\w+)\\.\\n\\n/g, '$1\\n');\r\n        response = response.replace(/\\.\\n\\n/g, '.\\n');\r\n        response = response.replace(/^\\s+|\\s+$/g, '');\r\n        response = response.replace(/^\"|\"$/g, '');\r\n        response = response.replace(/\\.\\s+(\\d+)\\./g, '$1.');\r\n        response = response.replace(/^\\.\\s*/gm, '');\r\n        response = response.replace(/([^.\\n])$/gm, '.');\r\n\r\n        // Link and email formatting\r\n        const linkRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n        const urlRegex = /go\\/([^\\s]+)/g;\r\n        const emailRegex = /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/g;\r\n\r\n        response = response.replace(linkRegex, (match, url) => `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`);\r\n        response = response.replace(urlRegex, (match, sometext) => `<a href=\"http://go/${sometext}\" target=\"_blank\" rel=\"noopener noreferrer\">go/${sometext}</a>`);\r\n        response = response.replace(emailRegex, (match, email) => `<a href=\"mailto:${email}\">${email}</a>`);\r\n\r\n        return response;\r\n    };\r\n\r\n    const handleSendMessage = (e) => {\r\n        e.preventDefault();\r\n        sendMessage();\r\n    };\r\n\r\n    const chatbotClassName = sourceName === 'public' ? 'Chatbot-public' : 'Chatbot-internal';\r\n    const conversationBoxClassName = sourceName === 'public' ? 'conversation-box-public' : 'conversation-box-internal';\r\n\r\n    return (\r\n        <div className={`Chatbot ${chatbotClassName}`}>\r\n            <Header title={`Chat with ${sourceName} Bot`} />\r\n            <div className=\"chatbot-subtitle\">\r\n                <p>You are interacting with the <b>{sourceName}</b> source.</p>\r\n            </div>\r\n            <div className=\"container\">\r\n                <ConversationBox\r\n                    className={conversationBoxClassName}\r\n                    messages={messages}\r\n                    isLoading={isLoading}\r\n                    conversationBoxRef={conversationBoxRef}\r\n                />\r\n                <InputBox\r\n                    question={input}\r\n                    setQuestion={setInput}\r\n                    handleSendMessage={handleSendMessage}\r\n                    isLoading={isLoading}\r\n                    showSpinner={showSpinner}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatWithSource;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}